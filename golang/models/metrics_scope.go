// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MetricsScope - UNKNOWN_METRIC_SCOPE: MAX_INT
//
// swagger:model MetricsScope
type MetricsScope string

func NewMetricsScope(value MetricsScope) *MetricsScope {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MetricsScope.
func (m MetricsScope) Pointer() *MetricsScope {
	return &m
}

const (

	// MetricsScopeMETRICSCOPEALL captures enum value "METRIC_SCOPE_ALL"
	MetricsScopeMETRICSCOPEALL MetricsScope = "METRIC_SCOPE_ALL"

	// MetricsScopeMETRICSCOPESERVICE captures enum value "METRIC_SCOPE_SERVICE"
	MetricsScopeMETRICSCOPESERVICE MetricsScope = "METRIC_SCOPE_SERVICE"

	// MetricsScopeMETRICSCOPEDATASTORE captures enum value "METRIC_SCOPE_DATASTORE"
	MetricsScopeMETRICSCOPEDATASTORE MetricsScope = "METRIC_SCOPE_DATASTORE"

	// MetricsScopeMETRICSCOPEDATABASE captures enum value "METRIC_SCOPE_DATABASE"
	MetricsScopeMETRICSCOPEDATABASE MetricsScope = "METRIC_SCOPE_DATABASE"

	// MetricsScopeUNKNOWNMETRICSCOPE captures enum value "UNKNOWN_METRIC_SCOPE"
	MetricsScopeUNKNOWNMETRICSCOPE MetricsScope = "UNKNOWN_METRIC_SCOPE"
)

// for schema
var metricsScopeEnum []interface{}

func init() {
	var res []MetricsScope
	if err := json.Unmarshal([]byte(`["METRIC_SCOPE_ALL","METRIC_SCOPE_SERVICE","METRIC_SCOPE_DATASTORE","METRIC_SCOPE_DATABASE","UNKNOWN_METRIC_SCOPE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metricsScopeEnum = append(metricsScopeEnum, v)
	}
}

func (m MetricsScope) validateMetricsScopeEnum(path, location string, value MetricsScope) error {
	if err := validate.EnumCase(path, location, value, metricsScopeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this metrics scope
func (m MetricsScope) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMetricsScopeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this metrics scope based on context it is used
func (m MetricsScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
