// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MetricsFormat - UNKNOWN_METRIC_FORMAT: MAX_INT
//
// swagger:model MetricsFormat
type MetricsFormat string

func NewMetricsFormat(value MetricsFormat) *MetricsFormat {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MetricsFormat.
func (m MetricsFormat) Pointer() *MetricsFormat {
	return &m
}

const (

	// MetricsFormatINVALIDMETRICFORMAT captures enum value "INVALID_METRIC_FORMAT"
	MetricsFormatINVALIDMETRICFORMAT MetricsFormat = "INVALID_METRIC_FORMAT"

	// MetricsFormatMETRICFORMATOPENMETRICS captures enum value "METRIC_FORMAT_OPENMETRICS"
	MetricsFormatMETRICFORMATOPENMETRICS MetricsFormat = "METRIC_FORMAT_OPENMETRICS"

	// MetricsFormatUNKNOWNMETRICFORMAT captures enum value "UNKNOWN_METRIC_FORMAT"
	MetricsFormatUNKNOWNMETRICFORMAT MetricsFormat = "UNKNOWN_METRIC_FORMAT"
)

// for schema
var metricsFormatEnum []interface{}

func init() {
	var res []MetricsFormat
	if err := json.Unmarshal([]byte(`["INVALID_METRIC_FORMAT","METRIC_FORMAT_OPENMETRICS","UNKNOWN_METRIC_FORMAT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metricsFormatEnum = append(metricsFormatEnum, v)
	}
}

func (m MetricsFormat) validateMetricsFormatEnum(path, location string, value MetricsFormat) error {
	if err := validate.EnumCase(path, location, value, metricsFormatEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this metrics format
func (m MetricsFormat) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMetricsFormatEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this metrics format based on context it is used
func (m MetricsFormat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
