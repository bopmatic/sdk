// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PackageState package state
//
// swagger:model PackageState
type PackageState string

func NewPackageState(value PackageState) *PackageState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PackageState.
func (m PackageState) Pointer() *PackageState {
	return &m
}

const (

	// PackageStateUPLOADING captures enum value "UPLOADING"
	PackageStateUPLOADING PackageState = "UPLOADING"

	// PackageStateUPLOADED captures enum value "UPLOADED"
	PackageStateUPLOADED PackageState = "UPLOADED"

	// PackageStateVALIDATING captures enum value "VALIDATING"
	PackageStateVALIDATING PackageState = "VALIDATING"

	// PackageStateINVALID captures enum value "INVALID"
	PackageStateINVALID PackageState = "INVALID"

	// PackageStateDEPLOYING captures enum value "DEPLOYING"
	PackageStateDEPLOYING PackageState = "DEPLOYING"

	// PackageStatePRODUCTION captures enum value "PRODUCTION"
	PackageStatePRODUCTION PackageState = "PRODUCTION"

	// PackageStateDEACTIVATING captures enum value "DEACTIVATING"
	PackageStateDEACTIVATING PackageState = "DEACTIVATING"

	// PackageStateDELETING captures enum value "DELETING"
	PackageStateDELETING PackageState = "DELETING"

	// PackageStateUNKNOWNPKGSTATE captures enum value "UNKNOWN_PKG_STATE"
	PackageStateUNKNOWNPKGSTATE PackageState = "UNKNOWN_PKG_STATE"
)

// for schema
var packageStateEnum []interface{}

func init() {
	var res []PackageState
	if err := json.Unmarshal([]byte(`["UPLOADING","UPLOADED","VALIDATING","INVALID","DEPLOYING","PRODUCTION","DEACTIVATING","DELETING","UNKNOWN_PKG_STATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packageStateEnum = append(packageStateEnum, v)
	}
}

func (m PackageState) validatePackageStateEnum(path, location string, value PackageState) error {
	if err := validate.EnumCase(path, location, value, packageStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this package state
func (m PackageState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePackageStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this package state based on context it is used
func (m PackageState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
