// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PackageState - INVALID_PKG_STATE: unused
//   - UPLOADING: package is currently in the process of being uploaded
//   - UPLOADED: upload has completed; the package has not yet started validataion
//   - PKG_VALIDATING: the package is in the process of being validated
//   - INVALID: the package failed validation checks or builds and cannot be
//   - PKG_BUILDING: deployed
//
// the package passed validation and is in the process of being built
//   - PKG_SUPPORT_NEEDED: something went wrong and Bopmatic support is investigating
//   - DELETED: the package has been deleted
//   - BUILT: the package was successfully built and is eligible to be deployed
//   - UNKNOWN_PKG_STATE: MAX_INT
//
// swagger:model PackageState
type PackageState string

func NewPackageState(value PackageState) *PackageState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PackageState.
func (m PackageState) Pointer() *PackageState {
	return &m
}

const (

	// PackageStateINVALIDPKGSTATE captures enum value "INVALID_PKG_STATE"
	PackageStateINVALIDPKGSTATE PackageState = "INVALID_PKG_STATE"

	// PackageStateUPLOADING captures enum value "UPLOADING"
	PackageStateUPLOADING PackageState = "UPLOADING"

	// PackageStateUPLOADED captures enum value "UPLOADED"
	PackageStateUPLOADED PackageState = "UPLOADED"

	// PackageStatePKGVALIDATING captures enum value "PKG_VALIDATING"
	PackageStatePKGVALIDATING PackageState = "PKG_VALIDATING"

	// PackageStateINVALID captures enum value "INVALID"
	PackageStateINVALID PackageState = "INVALID"

	// PackageStatePKGBUILDING captures enum value "PKG_BUILDING"
	PackageStatePKGBUILDING PackageState = "PKG_BUILDING"

	// PackageStatePKGSUPPORTNEEDED captures enum value "PKG_SUPPORT_NEEDED"
	PackageStatePKGSUPPORTNEEDED PackageState = "PKG_SUPPORT_NEEDED"

	// PackageStateDELETED captures enum value "DELETED"
	PackageStateDELETED PackageState = "DELETED"

	// PackageStateBUILT captures enum value "BUILT"
	PackageStateBUILT PackageState = "BUILT"

	// PackageStateUNKNOWNPKGSTATE captures enum value "UNKNOWN_PKG_STATE"
	PackageStateUNKNOWNPKGSTATE PackageState = "UNKNOWN_PKG_STATE"
)

// for schema
var packageStateEnum []interface{}

func init() {
	var res []PackageState
	if err := json.Unmarshal([]byte(`["INVALID_PKG_STATE","UPLOADING","UPLOADED","PKG_VALIDATING","INVALID","PKG_BUILDING","PKG_SUPPORT_NEEDED","DELETED","BUILT","UNKNOWN_PKG_STATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packageStateEnum = append(packageStateEnum, v)
	}
}

func (m PackageState) validatePackageStateEnum(path, location string, value PackageState) error {
	if err := validate.EnumCase(path, location, value, packageStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this package state
func (m PackageState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePackageStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this package state based on context it is used
func (m PackageState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
