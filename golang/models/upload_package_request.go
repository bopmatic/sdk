// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UploadPackageRequest upload package request
//
// swagger:model UploadPackageRequest
type UploadPackageRequest struct {

	// packageTarballData and packageTarballURL are mutually exclusive
	//
	// package tarball content in .tar.xz format (limited to 6MiB);
	// Format: byte
	PackageTarballData strfmt.Base64 `json:"packageTarballData,omitempty"`

	// URL to package tarball (when larger than 6MiB)
	PackageTarballURL string `json:"packageTarballURL,omitempty"`

	// sha256 checksum of packageTarballData
	// Format: byte
	PackageXsum strfmt.Base64 `json:"packageXsum,omitempty"`

	// project id associated with this package
	ProjID string `json:"projId,omitempty"`
}

// Validate validates this upload package request
func (m *UploadPackageRequest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this upload package request based on context it is used
func (m *UploadPackageRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UploadPackageRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UploadPackageRequest) UnmarshalBinary(b []byte) error {
	var res UploadPackageRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
