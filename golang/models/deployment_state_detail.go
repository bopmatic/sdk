// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DeploymentStateDetail - PKG_INVALID: the package associated with the deployment failed validation checks and
//   - BLD_INVALID: cannot be deployed
//
// the package associated with the deployment failed to compile
//   - DPLY_SUPPORT_NEEDED: the deployment failed for an unknown reason; Bopmatic support
//   - UNKNOWN_DEPLOY_STATE_DET: MAX_INT
//
// swagger:model DeploymentStateDetail
type DeploymentStateDetail string

func NewDeploymentStateDetail(value DeploymentStateDetail) *DeploymentStateDetail {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DeploymentStateDetail.
func (m DeploymentStateDetail) Pointer() *DeploymentStateDetail {
	return &m
}

const (

	// DeploymentStateDetailINVALIDDEPLOYSTATEDET captures enum value "INVALID_DEPLOY_STATE_DET"
	DeploymentStateDetailINVALIDDEPLOYSTATEDET DeploymentStateDetail = "INVALID_DEPLOY_STATE_DET"

	// DeploymentStateDetailNONE captures enum value "NONE"
	DeploymentStateDetailNONE DeploymentStateDetail = "NONE"

	// DeploymentStateDetailPKGINVALID captures enum value "PKG_INVALID"
	DeploymentStateDetailPKGINVALID DeploymentStateDetail = "PKG_INVALID"

	// DeploymentStateDetailBLDINVALID captures enum value "BLD_INVALID"
	DeploymentStateDetailBLDINVALID DeploymentStateDetail = "BLD_INVALID"

	// DeploymentStateDetailDPLYSUPPORTNEEDED captures enum value "DPLY_SUPPORT_NEEDED"
	DeploymentStateDetailDPLYSUPPORTNEEDED DeploymentStateDetail = "DPLY_SUPPORT_NEEDED"

	// DeploymentStateDetailUNKNOWNDEPLOYSTATEDET captures enum value "UNKNOWN_DEPLOY_STATE_DET"
	DeploymentStateDetailUNKNOWNDEPLOYSTATEDET DeploymentStateDetail = "UNKNOWN_DEPLOY_STATE_DET"
)

// for schema
var deploymentStateDetailEnum []interface{}

func init() {
	var res []DeploymentStateDetail
	if err := json.Unmarshal([]byte(`["INVALID_DEPLOY_STATE_DET","NONE","PKG_INVALID","BLD_INVALID","DPLY_SUPPORT_NEEDED","UNKNOWN_DEPLOY_STATE_DET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentStateDetailEnum = append(deploymentStateDetailEnum, v)
	}
}

func (m DeploymentStateDetail) validateDeploymentStateDetailEnum(path, location string, value DeploymentStateDetail) error {
	if err := validate.EnumCase(path, location, value, deploymentStateDetailEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this deployment state detail
func (m DeploymentStateDetail) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDeploymentStateDetailEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this deployment state detail based on context it is used
func (m DeploymentStateDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
