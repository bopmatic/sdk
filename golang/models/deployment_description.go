// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeploymentDescription deployment description
//
// swagger:model DeploymentDescription
type DeploymentDescription struct {

	// time the package build began expressed as the number of milliseconds since
	// Jan 1, 1970 00:00:00 UTC
	BuildStartTime string `json:"buildStartTime,omitempty"`

	// time the deployment was created expressed as the number of milliseconds since
	// Jan 1, 1970 00:00:00 UTC
	CreateTime string `json:"createTime,omitempty"`

	// time the environment deployment began expressed as the number of milliseconds since
	// Jan 1, 1970 00:00:00 UTC
	DeployStartTime string `json:"deployStartTime,omitempty"`

	// time the deployment completed
	EndTime string `json:"endTime,omitempty"`

	// deployment header
	Header *DeploymentHeader `json:"header,omitempty"`

	// a unique identifier associated with this deployment
	ID string `json:"id,omitempty"`

	// the deployment's state
	State *DeploymentState `json:"state,omitempty"`

	// additional detail regarding the deployment's state
	StateDetail *DeploymentStateDetail `json:"stateDetail,omitempty"`

	// time the package validation began expressed as the number of milliseconds since
	// Jan 1, 1970 00:00:00 UTC
	ValidationStartTime string `json:"validationStartTime,omitempty"`
}

// Validate validates this deployment description
func (m *DeploymentDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentDescription) validateHeader(formats strfmt.Registry) error {
	if swag.IsZero(m.Header) { // not required
		return nil
	}

	if m.Header != nil {
		if err := m.Header.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentDescription) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentDescription) validateStateDetail(formats strfmt.Registry) error {
	if swag.IsZero(m.StateDetail) { // not required
		return nil
	}

	if m.StateDetail != nil {
		if err := m.StateDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stateDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stateDetail")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this deployment description based on the context it is used
func (m *DeploymentDescription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentDescription) contextValidateHeader(ctx context.Context, formats strfmt.Registry) error {

	if m.Header != nil {

		if swag.IsZero(m.Header) { // not required
			return nil
		}

		if err := m.Header.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentDescription) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {

		if swag.IsZero(m.State) { // not required
			return nil
		}

		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentDescription) contextValidateStateDetail(ctx context.Context, formats strfmt.Registry) error {

	if m.StateDetail != nil {

		if swag.IsZero(m.StateDetail) { // not required
			return nil
		}

		if err := m.StateDetail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stateDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stateDetail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentDescription) UnmarshalBinary(b []byte) error {
	var res DeploymentDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
