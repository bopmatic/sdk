// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetMetricSamplesRequest get metric samples request
//
// swagger:model GetMetricSamplesRequest
type GetMetricSamplesRequest struct {

	// of seconds since Jan 1, 1970 00:00:00 UTC
	//
	// latest metric to retrieve expressed as the number of
	EndTime string `json:"endTime,omitempty"`

	// environment id
	EnvID string `json:"envId,omitempty"`

	// seconds since Jan 1, 1970 00:00:00 UTC
	//
	// desired output format of the retrieved metrics
	Format *MetricsFormat `json:"format,omitempty"`

	// optional; list of metric names to retrieve; can leave empty for all
	MetricNames []string `json:"metricNames"`

	// project id
	ProjID string `json:"projId,omitempty"`

	// desired metric sample period in seconds; default is 300s
	SamplePeriod string `json:"samplePeriod,omitempty"`

	// the scope of the metrics query; e.g. all or limited to 1 entity class
	Scope *MetricsScope `json:"scope,omitempty"`

	// optional; can leave empty for all entities in a given scope class or set to a specific entity to retrieve metrics from only that entity. for example, to retrieve only the metrics
	// related to a database named 'foo', set scope=METRIC_SCOPE_DATABASE and
	// scopeQualifier='foo'
	ScopeQualifier string `json:"scopeQualifier,omitempty"`

	// earliest metric to retrieve expressed as the number
	StartTime string `json:"startTime,omitempty"`
}

// Validate validates this get metric samples request
func (m *GetMetricSamplesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetMetricSamplesRequest) validateFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.Format) { // not required
		return nil
	}

	if m.Format != nil {
		if err := m.Format.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("format")
			}
			return err
		}
	}

	return nil
}

func (m *GetMetricSamplesRequest) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get metric samples request based on the context it is used
func (m *GetMetricSamplesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetMetricSamplesRequest) contextValidateFormat(ctx context.Context, formats strfmt.Registry) error {

	if m.Format != nil {

		if swag.IsZero(m.Format) { // not required
			return nil
		}

		if err := m.Format.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("format")
			}
			return err
		}
	}

	return nil
}

func (m *GetMetricSamplesRequest) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if m.Scope != nil {

		if swag.IsZero(m.Scope) { // not required
			return nil
		}

		if err := m.Scope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetMetricSamplesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetMetricSamplesRequest) UnmarshalBinary(b []byte) error {
	var res GetMetricSamplesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
