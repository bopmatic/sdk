// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DeploymentState - CREATED: the deployment has been created, but no action has yet been taken
//   - DPLY_VALIDATING: the package associated with the deployment is in the process of being
//   - DPLY_BUILDING: validated
//
// the package associated with the deployment passed validation and is in
//   - DEPLOYING: the process of being compiled
//
// the package associated with the deployment compiled successfully and is
//   - SUCCESS: in the process of being deployed to the environment specified
//
// the deployment was successful and the package associated with the
//   - FAILED: deployment is now active in the environment specified
//
// the deployment failed; see DeploymentDescription.stateDetail for further
//   - UNKNOWN_DEPLOY_STATE: MAX_INT
//
// swagger:model DeploymentState
type DeploymentState string

func NewDeploymentState(value DeploymentState) *DeploymentState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DeploymentState.
func (m DeploymentState) Pointer() *DeploymentState {
	return &m
}

const (

	// DeploymentStateCREATED captures enum value "CREATED"
	DeploymentStateCREATED DeploymentState = "CREATED"

	// DeploymentStateDPLYVALIDATING captures enum value "DPLY_VALIDATING"
	DeploymentStateDPLYVALIDATING DeploymentState = "DPLY_VALIDATING"

	// DeploymentStateDPLYBUILDING captures enum value "DPLY_BUILDING"
	DeploymentStateDPLYBUILDING DeploymentState = "DPLY_BUILDING"

	// DeploymentStateDEPLOYING captures enum value "DEPLOYING"
	DeploymentStateDEPLOYING DeploymentState = "DEPLOYING"

	// DeploymentStateSUCCESS captures enum value "SUCCESS"
	DeploymentStateSUCCESS DeploymentState = "SUCCESS"

	// DeploymentStateFAILED captures enum value "FAILED"
	DeploymentStateFAILED DeploymentState = "FAILED"

	// DeploymentStateUNKNOWNDEPLOYSTATE captures enum value "UNKNOWN_DEPLOY_STATE"
	DeploymentStateUNKNOWNDEPLOYSTATE DeploymentState = "UNKNOWN_DEPLOY_STATE"
)

// for schema
var deploymentStateEnum []interface{}

func init() {
	var res []DeploymentState
	if err := json.Unmarshal([]byte(`["CREATED","DPLY_VALIDATING","DPLY_BUILDING","DEPLOYING","SUCCESS","FAILED","UNKNOWN_DEPLOY_STATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentStateEnum = append(deploymentStateEnum, v)
	}
}

func (m DeploymentState) validateDeploymentStateEnum(path, location string, value DeploymentState) error {
	if err := validate.EnumCase(path, location, value, deploymentStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this deployment state
func (m DeploymentState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDeploymentStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this deployment state based on context it is used
func (m DeploymentState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
