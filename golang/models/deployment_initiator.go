// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DeploymentInitiator - INVALID_DEPLOY_INIT: unused
//   - CUSTOMER: the customer initiated the deployment
//   - SERVICE: Bopmatic initiated the deployment
//   - UNKNOWN_DEPLOY_INIT: MAX_INT
//
// swagger:model DeploymentInitiator
type DeploymentInitiator string

func NewDeploymentInitiator(value DeploymentInitiator) *DeploymentInitiator {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DeploymentInitiator.
func (m DeploymentInitiator) Pointer() *DeploymentInitiator {
	return &m
}

const (

	// DeploymentInitiatorINVALIDDEPLOYINIT captures enum value "INVALID_DEPLOY_INIT"
	DeploymentInitiatorINVALIDDEPLOYINIT DeploymentInitiator = "INVALID_DEPLOY_INIT"

	// DeploymentInitiatorCUSTOMER captures enum value "CUSTOMER"
	DeploymentInitiatorCUSTOMER DeploymentInitiator = "CUSTOMER"

	// DeploymentInitiatorSERVICE captures enum value "SERVICE"
	DeploymentInitiatorSERVICE DeploymentInitiator = "SERVICE"

	// DeploymentInitiatorUNKNOWNDEPLOYINIT captures enum value "UNKNOWN_DEPLOY_INIT"
	DeploymentInitiatorUNKNOWNDEPLOYINIT DeploymentInitiator = "UNKNOWN_DEPLOY_INIT"
)

// for schema
var deploymentInitiatorEnum []interface{}

func init() {
	var res []DeploymentInitiator
	if err := json.Unmarshal([]byte(`["INVALID_DEPLOY_INIT","CUSTOMER","SERVICE","UNKNOWN_DEPLOY_INIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentInitiatorEnum = append(deploymentInitiatorEnum, v)
	}
}

func (m DeploymentInitiator) validateDeploymentInitiatorEnum(path, location string, value DeploymentInitiator) error {
	if err := validate.EnumCase(path, location, value, deploymentInitiatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this deployment initiator
func (m DeploymentInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDeploymentInitiatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this deployment initiator based on context it is used
func (m DeploymentInitiator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
