// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DeploymentType - INVALID_DEPLOY_TYPE: unused
//   - NEW_PACKAGE: the deployment was created in order to deploy a new package to
//   - ENV_TEARDOWN: the environment (customer initiated)
//
// the deployment was created in order to remove the project from
//   - SECURITY_UPDATE: the environment (customer initiated)
//
// the deployment was created in order to perform a security update
//   - INF_UPDATE: on the backend infrastructure (service initiated)
//
// the deployment was created in order to perform a non-security related
//   - UNKNOWN_DEPLOY_TYPE: MAX_INT
//
// swagger:model DeploymentType
type DeploymentType string

func NewDeploymentType(value DeploymentType) *DeploymentType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DeploymentType.
func (m DeploymentType) Pointer() *DeploymentType {
	return &m
}

const (

	// DeploymentTypeINVALIDDEPLOYTYPE captures enum value "INVALID_DEPLOY_TYPE"
	DeploymentTypeINVALIDDEPLOYTYPE DeploymentType = "INVALID_DEPLOY_TYPE"

	// DeploymentTypeNEWPACKAGE captures enum value "NEW_PACKAGE"
	DeploymentTypeNEWPACKAGE DeploymentType = "NEW_PACKAGE"

	// DeploymentTypeENVTEARDOWN captures enum value "ENV_TEARDOWN"
	DeploymentTypeENVTEARDOWN DeploymentType = "ENV_TEARDOWN"

	// DeploymentTypeSECURITYUPDATE captures enum value "SECURITY_UPDATE"
	DeploymentTypeSECURITYUPDATE DeploymentType = "SECURITY_UPDATE"

	// DeploymentTypeINFUPDATE captures enum value "INF_UPDATE"
	DeploymentTypeINFUPDATE DeploymentType = "INF_UPDATE"

	// DeploymentTypeUNKNOWNDEPLOYTYPE captures enum value "UNKNOWN_DEPLOY_TYPE"
	DeploymentTypeUNKNOWNDEPLOYTYPE DeploymentType = "UNKNOWN_DEPLOY_TYPE"
)

// for schema
var deploymentTypeEnum []interface{}

func init() {
	var res []DeploymentType
	if err := json.Unmarshal([]byte(`["INVALID_DEPLOY_TYPE","NEW_PACKAGE","ENV_TEARDOWN","SECURITY_UPDATE","INF_UPDATE","UNKNOWN_DEPLOY_TYPE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentTypeEnum = append(deploymentTypeEnum, v)
	}
}

func (m DeploymentType) validateDeploymentTypeEnum(path, location string, value DeploymentType) error {
	if err := validate.EnumCase(path, location, value, deploymentTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this deployment type
func (m DeploymentType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDeploymentTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this deployment type based on context it is used
func (m DeploymentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
