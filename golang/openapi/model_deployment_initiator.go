/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DeploymentInitiator the model 'DeploymentInitiator'
type DeploymentInitiator string

// List of DeploymentInitiator
const (
	CUSTOMER DeploymentInitiator = "CUSTOMER"
	SERVICE DeploymentInitiator = "SERVICE"
	UNKNOWN_DEPLOY_INIT DeploymentInitiator = "UNKNOWN_DEPLOY_INIT"
)

// All allowed values of DeploymentInitiator enum
var AllowedDeploymentInitiatorEnumValues = []DeploymentInitiator{
	"CUSTOMER",
	"SERVICE",
	"UNKNOWN_DEPLOY_INIT",
}

func (v *DeploymentInitiator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentInitiator(value)
	for _, existing := range AllowedDeploymentInitiatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentInitiator", value)
}

// NewDeploymentInitiatorFromValue returns a pointer to a valid DeploymentInitiator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentInitiatorFromValue(v string) (*DeploymentInitiator, error) {
	ev := DeploymentInitiator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentInitiator: valid values are %v", v, AllowedDeploymentInitiatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentInitiator) IsValid() bool {
	for _, existing := range AllowedDeploymentInitiatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentInitiator value
func (v DeploymentInitiator) Ptr() *DeploymentInitiator {
	return &v
}

type NullableDeploymentInitiator struct {
	value *DeploymentInitiator
	isSet bool
}

func (v NullableDeploymentInitiator) Get() *DeploymentInitiator {
	return v.value
}

func (v *NullableDeploymentInitiator) Set(val *DeploymentInitiator) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentInitiator) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentInitiator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentInitiator(val *DeploymentInitiator) *NullableDeploymentInitiator {
	return &NullableDeploymentInitiator{value: val, isSet: true}
}

func (v NullableDeploymentInitiator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentInitiator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

