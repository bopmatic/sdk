/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetLogsReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetLogsReply{}

// GetLogsReply struct for GetLogsReply
type GetLogsReply struct {
	Entries []GetLogsEntry `json:"entries,omitempty"`
}

// NewGetLogsReply instantiates a new GetLogsReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetLogsReply() *GetLogsReply {
	this := GetLogsReply{}
	return &this
}

// NewGetLogsReplyWithDefaults instantiates a new GetLogsReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetLogsReplyWithDefaults() *GetLogsReply {
	this := GetLogsReply{}
	return &this
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *GetLogsReply) GetEntries() []GetLogsEntry {
	if o == nil || IsNil(o.Entries) {
		var ret []GetLogsEntry
		return ret
	}
	return o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLogsReply) GetEntriesOk() ([]GetLogsEntry, bool) {
	if o == nil || IsNil(o.Entries) {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *GetLogsReply) HasEntries() bool {
	if o != nil && !IsNil(o.Entries) {
		return true
	}

	return false
}

// SetEntries gets a reference to the given []GetLogsEntry and assigns it to the Entries field.
func (o *GetLogsReply) SetEntries(v []GetLogsEntry) {
	o.Entries = v
}

func (o GetLogsReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetLogsReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entries) {
		toSerialize["entries"] = o.Entries
	}
	return toSerialize, nil
}

type NullableGetLogsReply struct {
	value *GetLogsReply
	isSet bool
}

func (v NullableGetLogsReply) Get() *GetLogsReply {
	return v.value
}

func (v *NullableGetLogsReply) Set(val *GetLogsReply) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLogsReply) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLogsReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLogsReply(val *GetLogsReply) *NullableGetLogsReply {
	return &NullableGetLogsReply{value: val, isSet: true}
}

func (v NullableGetLogsReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLogsReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


