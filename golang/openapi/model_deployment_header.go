/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeploymentHeader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentHeader{}

// DeploymentHeader struct for DeploymentHeader
type DeploymentHeader struct {
	PkgId *string `json:"pkgId,omitempty"`
	ProjId *string `json:"projId,omitempty"`
	EnvId *string `json:"envId,omitempty"`
	Type *DeploymentType `json:"type,omitempty"`
	Initiator *DeploymentInitiator `json:"initiator,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// NewDeploymentHeader instantiates a new DeploymentHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentHeader() *DeploymentHeader {
	this := DeploymentHeader{}
	var type_ DeploymentType = INVALID_DEPLOY_TYPE
	this.Type = &type_
	var initiator DeploymentInitiator = INVALID_DEPLOY_INIT
	this.Initiator = &initiator
	return &this
}

// NewDeploymentHeaderWithDefaults instantiates a new DeploymentHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentHeaderWithDefaults() *DeploymentHeader {
	this := DeploymentHeader{}
	var type_ DeploymentType = INVALID_DEPLOY_TYPE
	this.Type = &type_
	var initiator DeploymentInitiator = INVALID_DEPLOY_INIT
	this.Initiator = &initiator
	return &this
}

// GetPkgId returns the PkgId field value if set, zero value otherwise.
func (o *DeploymentHeader) GetPkgId() string {
	if o == nil || IsNil(o.PkgId) {
		var ret string
		return ret
	}
	return *o.PkgId
}

// GetPkgIdOk returns a tuple with the PkgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHeader) GetPkgIdOk() (*string, bool) {
	if o == nil || IsNil(o.PkgId) {
		return nil, false
	}
	return o.PkgId, true
}

// HasPkgId returns a boolean if a field has been set.
func (o *DeploymentHeader) HasPkgId() bool {
	if o != nil && !IsNil(o.PkgId) {
		return true
	}

	return false
}

// SetPkgId gets a reference to the given string and assigns it to the PkgId field.
func (o *DeploymentHeader) SetPkgId(v string) {
	o.PkgId = &v
}

// GetProjId returns the ProjId field value if set, zero value otherwise.
func (o *DeploymentHeader) GetProjId() string {
	if o == nil || IsNil(o.ProjId) {
		var ret string
		return ret
	}
	return *o.ProjId
}

// GetProjIdOk returns a tuple with the ProjId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHeader) GetProjIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjId) {
		return nil, false
	}
	return o.ProjId, true
}

// HasProjId returns a boolean if a field has been set.
func (o *DeploymentHeader) HasProjId() bool {
	if o != nil && !IsNil(o.ProjId) {
		return true
	}

	return false
}

// SetProjId gets a reference to the given string and assigns it to the ProjId field.
func (o *DeploymentHeader) SetProjId(v string) {
	o.ProjId = &v
}

// GetEnvId returns the EnvId field value if set, zero value otherwise.
func (o *DeploymentHeader) GetEnvId() string {
	if o == nil || IsNil(o.EnvId) {
		var ret string
		return ret
	}
	return *o.EnvId
}

// GetEnvIdOk returns a tuple with the EnvId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHeader) GetEnvIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvId) {
		return nil, false
	}
	return o.EnvId, true
}

// HasEnvId returns a boolean if a field has been set.
func (o *DeploymentHeader) HasEnvId() bool {
	if o != nil && !IsNil(o.EnvId) {
		return true
	}

	return false
}

// SetEnvId gets a reference to the given string and assigns it to the EnvId field.
func (o *DeploymentHeader) SetEnvId(v string) {
	o.EnvId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DeploymentHeader) GetType() DeploymentType {
	if o == nil || IsNil(o.Type) {
		var ret DeploymentType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHeader) GetTypeOk() (*DeploymentType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DeploymentHeader) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DeploymentType and assigns it to the Type field.
func (o *DeploymentHeader) SetType(v DeploymentType) {
	o.Type = &v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *DeploymentHeader) GetInitiator() DeploymentInitiator {
	if o == nil || IsNil(o.Initiator) {
		var ret DeploymentInitiator
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHeader) GetInitiatorOk() (*DeploymentInitiator, bool) {
	if o == nil || IsNil(o.Initiator) {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *DeploymentHeader) HasInitiator() bool {
	if o != nil && !IsNil(o.Initiator) {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given DeploymentInitiator and assigns it to the Initiator field.
func (o *DeploymentHeader) SetInitiator(v DeploymentInitiator) {
	o.Initiator = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *DeploymentHeader) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentHeader) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *DeploymentHeader) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *DeploymentHeader) SetReason(v string) {
	o.Reason = &v
}

func (o DeploymentHeader) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentHeader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PkgId) {
		toSerialize["pkgId"] = o.PkgId
	}
	if !IsNil(o.ProjId) {
		toSerialize["projId"] = o.ProjId
	}
	if !IsNil(o.EnvId) {
		toSerialize["envId"] = o.EnvId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Initiator) {
		toSerialize["initiator"] = o.Initiator
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableDeploymentHeader struct {
	value *DeploymentHeader
	isSet bool
}

func (v NullableDeploymentHeader) Get() *DeploymentHeader {
	return v.value
}

func (v *NullableDeploymentHeader) Set(val *DeploymentHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentHeader(val *DeploymentHeader) *NullableDeploymentHeader {
	return &NullableDeploymentHeader{value: val, isSet: true}
}

func (v NullableDeploymentHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


