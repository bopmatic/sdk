/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MetricsScope the model 'MetricsScope'
type MetricsScope string

// List of MetricsScope
const (
	METRIC_SCOPE_ALL MetricsScope = "METRIC_SCOPE_ALL"
	METRIC_SCOPE_SERVICE MetricsScope = "METRIC_SCOPE_SERVICE"
	METRIC_SCOPE_DATASTORE MetricsScope = "METRIC_SCOPE_DATASTORE"
	METRIC_SCOPE_DATABASE MetricsScope = "METRIC_SCOPE_DATABASE"
	UNKNOWN_METRIC_SCOPE MetricsScope = "UNKNOWN_METRIC_SCOPE"
)

// All allowed values of MetricsScope enum
var AllowedMetricsScopeEnumValues = []MetricsScope{
	"METRIC_SCOPE_ALL",
	"METRIC_SCOPE_SERVICE",
	"METRIC_SCOPE_DATASTORE",
	"METRIC_SCOPE_DATABASE",
	"UNKNOWN_METRIC_SCOPE",
}

func (v *MetricsScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricsScope(value)
	for _, existing := range AllowedMetricsScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricsScope", value)
}

// NewMetricsScopeFromValue returns a pointer to a valid MetricsScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricsScopeFromValue(v string) (*MetricsScope, error) {
	ev := MetricsScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricsScope: valid values are %v", v, AllowedMetricsScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricsScope) IsValid() bool {
	for _, existing := range AllowedMetricsScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetricsScope value
func (v MetricsScope) Ptr() *MetricsScope {
	return &v
}

type NullableMetricsScope struct {
	value *MetricsScope
	isSet bool
}

func (v NullableMetricsScope) Get() *MetricsScope {
	return v.value
}

func (v *NullableMetricsScope) Set(val *MetricsScope) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricsScope) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricsScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricsScope(val *MetricsScope) *NullableMetricsScope {
	return &NullableMetricsScope{value: val, isSet: true}
}

func (v NullableMetricsScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricsScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

