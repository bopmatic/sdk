/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ServiceDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceDescription{}

// ServiceDescription struct for ServiceDescription
type ServiceDescription struct {
	SvcHeader *ServiceHeader `json:"svcHeader,omitempty"`
	RpcEndpoints []string `json:"rpcEndpoints,omitempty"`
}

// NewServiceDescription instantiates a new ServiceDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceDescription() *ServiceDescription {
	this := ServiceDescription{}
	return &this
}

// NewServiceDescriptionWithDefaults instantiates a new ServiceDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceDescriptionWithDefaults() *ServiceDescription {
	this := ServiceDescription{}
	return &this
}

// GetSvcHeader returns the SvcHeader field value if set, zero value otherwise.
func (o *ServiceDescription) GetSvcHeader() ServiceHeader {
	if o == nil || IsNil(o.SvcHeader) {
		var ret ServiceHeader
		return ret
	}
	return *o.SvcHeader
}

// GetSvcHeaderOk returns a tuple with the SvcHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceDescription) GetSvcHeaderOk() (*ServiceHeader, bool) {
	if o == nil || IsNil(o.SvcHeader) {
		return nil, false
	}
	return o.SvcHeader, true
}

// HasSvcHeader returns a boolean if a field has been set.
func (o *ServiceDescription) HasSvcHeader() bool {
	if o != nil && !IsNil(o.SvcHeader) {
		return true
	}

	return false
}

// SetSvcHeader gets a reference to the given ServiceHeader and assigns it to the SvcHeader field.
func (o *ServiceDescription) SetSvcHeader(v ServiceHeader) {
	o.SvcHeader = &v
}

// GetRpcEndpoints returns the RpcEndpoints field value if set, zero value otherwise.
func (o *ServiceDescription) GetRpcEndpoints() []string {
	if o == nil || IsNil(o.RpcEndpoints) {
		var ret []string
		return ret
	}
	return o.RpcEndpoints
}

// GetRpcEndpointsOk returns a tuple with the RpcEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceDescription) GetRpcEndpointsOk() ([]string, bool) {
	if o == nil || IsNil(o.RpcEndpoints) {
		return nil, false
	}
	return o.RpcEndpoints, true
}

// HasRpcEndpoints returns a boolean if a field has been set.
func (o *ServiceDescription) HasRpcEndpoints() bool {
	if o != nil && !IsNil(o.RpcEndpoints) {
		return true
	}

	return false
}

// SetRpcEndpoints gets a reference to the given []string and assigns it to the RpcEndpoints field.
func (o *ServiceDescription) SetRpcEndpoints(v []string) {
	o.RpcEndpoints = v
}

func (o ServiceDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SvcHeader) {
		toSerialize["svcHeader"] = o.SvcHeader
	}
	if !IsNil(o.RpcEndpoints) {
		toSerialize["rpcEndpoints"] = o.RpcEndpoints
	}
	return toSerialize, nil
}

type NullableServiceDescription struct {
	value *ServiceDescription
	isSet bool
}

func (v NullableServiceDescription) Get() *ServiceDescription {
	return v.value
}

func (v *NullableServiceDescription) Set(val *ServiceDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceDescription(val *ServiceDescription) *NullableServiceDescription {
	return &NullableServiceDescription{value: val, isSet: true}
}

func (v NullableServiceDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


