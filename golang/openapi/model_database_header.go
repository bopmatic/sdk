/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseHeader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseHeader{}

// DatabaseHeader struct for DatabaseHeader
type DatabaseHeader struct {
	ProjEnvHeader *ProjEnvHeader `json:"projEnvHeader,omitempty"`
	DatabaseName *string `json:"databaseName,omitempty"`
}

// NewDatabaseHeader instantiates a new DatabaseHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseHeader() *DatabaseHeader {
	this := DatabaseHeader{}
	return &this
}

// NewDatabaseHeaderWithDefaults instantiates a new DatabaseHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseHeaderWithDefaults() *DatabaseHeader {
	this := DatabaseHeader{}
	return &this
}

// GetProjEnvHeader returns the ProjEnvHeader field value if set, zero value otherwise.
func (o *DatabaseHeader) GetProjEnvHeader() ProjEnvHeader {
	if o == nil || IsNil(o.ProjEnvHeader) {
		var ret ProjEnvHeader
		return ret
	}
	return *o.ProjEnvHeader
}

// GetProjEnvHeaderOk returns a tuple with the ProjEnvHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseHeader) GetProjEnvHeaderOk() (*ProjEnvHeader, bool) {
	if o == nil || IsNil(o.ProjEnvHeader) {
		return nil, false
	}
	return o.ProjEnvHeader, true
}

// HasProjEnvHeader returns a boolean if a field has been set.
func (o *DatabaseHeader) HasProjEnvHeader() bool {
	if o != nil && !IsNil(o.ProjEnvHeader) {
		return true
	}

	return false
}

// SetProjEnvHeader gets a reference to the given ProjEnvHeader and assigns it to the ProjEnvHeader field.
func (o *DatabaseHeader) SetProjEnvHeader(v ProjEnvHeader) {
	o.ProjEnvHeader = &v
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise.
func (o *DatabaseHeader) GetDatabaseName() string {
	if o == nil || IsNil(o.DatabaseName) {
		var ret string
		return ret
	}
	return *o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseHeader) GetDatabaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatabaseName) {
		return nil, false
	}
	return o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *DatabaseHeader) HasDatabaseName() bool {
	if o != nil && !IsNil(o.DatabaseName) {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given string and assigns it to the DatabaseName field.
func (o *DatabaseHeader) SetDatabaseName(v string) {
	o.DatabaseName = &v
}

func (o DatabaseHeader) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseHeader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjEnvHeader) {
		toSerialize["projEnvHeader"] = o.ProjEnvHeader
	}
	if !IsNil(o.DatabaseName) {
		toSerialize["databaseName"] = o.DatabaseName
	}
	return toSerialize, nil
}

type NullableDatabaseHeader struct {
	value *DatabaseHeader
	isSet bool
}

func (v NullableDatabaseHeader) Get() *DatabaseHeader {
	return v.value
}

func (v *NullableDatabaseHeader) Set(val *DatabaseHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseHeader(val *DatabaseHeader) *NullableDatabaseHeader {
	return &NullableDatabaseHeader{value: val, isSet: true}
}

func (v NullableDatabaseHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


