/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListDatastoresReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListDatastoresReply{}

// ListDatastoresReply struct for ListDatastoresReply
type ListDatastoresReply struct {
	Result *ServiceRunnerResult `json:"result,omitempty"`
	Header *ProjEnvHeader `json:"header,omitempty"`
	DatastoreNames []string `json:"datastoreNames,omitempty"`
}

// NewListDatastoresReply instantiates a new ListDatastoresReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListDatastoresReply() *ListDatastoresReply {
	this := ListDatastoresReply{}
	return &this
}

// NewListDatastoresReplyWithDefaults instantiates a new ListDatastoresReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListDatastoresReplyWithDefaults() *ListDatastoresReply {
	this := ListDatastoresReply{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *ListDatastoresReply) GetResult() ServiceRunnerResult {
	if o == nil || IsNil(o.Result) {
		var ret ServiceRunnerResult
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListDatastoresReply) GetResultOk() (*ServiceRunnerResult, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *ListDatastoresReply) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given ServiceRunnerResult and assigns it to the Result field.
func (o *ListDatastoresReply) SetResult(v ServiceRunnerResult) {
	o.Result = &v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *ListDatastoresReply) GetHeader() ProjEnvHeader {
	if o == nil || IsNil(o.Header) {
		var ret ProjEnvHeader
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListDatastoresReply) GetHeaderOk() (*ProjEnvHeader, bool) {
	if o == nil || IsNil(o.Header) {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *ListDatastoresReply) HasHeader() bool {
	if o != nil && !IsNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given ProjEnvHeader and assigns it to the Header field.
func (o *ListDatastoresReply) SetHeader(v ProjEnvHeader) {
	o.Header = &v
}

// GetDatastoreNames returns the DatastoreNames field value if set, zero value otherwise.
func (o *ListDatastoresReply) GetDatastoreNames() []string {
	if o == nil || IsNil(o.DatastoreNames) {
		var ret []string
		return ret
	}
	return o.DatastoreNames
}

// GetDatastoreNamesOk returns a tuple with the DatastoreNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListDatastoresReply) GetDatastoreNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.DatastoreNames) {
		return nil, false
	}
	return o.DatastoreNames, true
}

// HasDatastoreNames returns a boolean if a field has been set.
func (o *ListDatastoresReply) HasDatastoreNames() bool {
	if o != nil && !IsNil(o.DatastoreNames) {
		return true
	}

	return false
}

// SetDatastoreNames gets a reference to the given []string and assigns it to the DatastoreNames field.
func (o *ListDatastoresReply) SetDatastoreNames(v []string) {
	o.DatastoreNames = v
}

func (o ListDatastoresReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListDatastoresReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	if !IsNil(o.DatastoreNames) {
		toSerialize["datastoreNames"] = o.DatastoreNames
	}
	return toSerialize, nil
}

type NullableListDatastoresReply struct {
	value *ListDatastoresReply
	isSet bool
}

func (v NullableListDatastoresReply) Get() *ListDatastoresReply {
	return v.value
}

func (v *NullableListDatastoresReply) Set(val *ListDatastoresReply) {
	v.value = val
	v.isSet = true
}

func (v NullableListDatastoresReply) IsSet() bool {
	return v.isSet
}

func (v *NullableListDatastoresReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDatastoresReply(val *ListDatastoresReply) *NullableListDatastoresReply {
	return &NullableListDatastoresReply{value: val, isSet: true}
}

func (v NullableListDatastoresReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDatastoresReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


