/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DeploymentState the package associated with the deployment passed validation and is in  - DEPLOYING: the process of being compiled  the package associated with the deployment compiled successfully and is  - SUCCESS: in the process of being deployed to the environment specified  the deployment was successful and the package associated with the  - FAILED: deployment is now active in the environment specified  the deployment failed; see DeploymentDescription.stateDetail for further  - UNKNOWN_DEPLOY_STATE: MAX_INT
type DeploymentState string

// List of DeploymentState
const (
	CREATED DeploymentState = "CREATED"
	DPLY_VALIDATING DeploymentState = "DPLY_VALIDATING"
	DPLY_BUILDING DeploymentState = "DPLY_BUILDING"
	DEPLOYING DeploymentState = "DEPLOYING"
	SUCCESS DeploymentState = "SUCCESS"
	FAILED DeploymentState = "FAILED"
	UNKNOWN_DEPLOY_STATE DeploymentState = "UNKNOWN_DEPLOY_STATE"
)

// All allowed values of DeploymentState enum
var AllowedDeploymentStateEnumValues = []DeploymentState{
	"CREATED",
	"DPLY_VALIDATING",
	"DPLY_BUILDING",
	"DEPLOYING",
	"SUCCESS",
	"FAILED",
	"UNKNOWN_DEPLOY_STATE",
}

func (v *DeploymentState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeploymentState(value)
	for _, existing := range AllowedDeploymentStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeploymentState", value)
}

// NewDeploymentStateFromValue returns a pointer to a valid DeploymentState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeploymentStateFromValue(v string) (*DeploymentState, error) {
	ev := DeploymentState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeploymentState: valid values are %v", v, AllowedDeploymentStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeploymentState) IsValid() bool {
	for _, existing := range AllowedDeploymentStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DeploymentState value
func (v DeploymentState) Ptr() *DeploymentState {
	return &v
}

type NullableDeploymentState struct {
	value *DeploymentState
	isSet bool
}

func (v NullableDeploymentState) Get() *DeploymentState {
	return v.value
}

func (v *NullableDeploymentState) Set(val *DeploymentState) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentState) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentState(val *DeploymentState) *NullableDeploymentState {
	return &NullableDeploymentState{value: val, isSet: true}
}

func (v NullableDeploymentState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

