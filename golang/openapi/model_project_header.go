/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProjectHeader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectHeader{}

// ProjectHeader struct for ProjectHeader
type ProjectHeader struct {
	Name *string `json:"name,omitempty"`
	DnsPrefix *string `json:"dnsPrefix,omitempty"`
	DnsDomain *string `json:"dnsDomain,omitempty"`
}

// NewProjectHeader instantiates a new ProjectHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectHeader() *ProjectHeader {
	this := ProjectHeader{}
	return &this
}

// NewProjectHeaderWithDefaults instantiates a new ProjectHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectHeaderWithDefaults() *ProjectHeader {
	this := ProjectHeader{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectHeader) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectHeader) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectHeader) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectHeader) SetName(v string) {
	o.Name = &v
}

// GetDnsPrefix returns the DnsPrefix field value if set, zero value otherwise.
func (o *ProjectHeader) GetDnsPrefix() string {
	if o == nil || IsNil(o.DnsPrefix) {
		var ret string
		return ret
	}
	return *o.DnsPrefix
}

// GetDnsPrefixOk returns a tuple with the DnsPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectHeader) GetDnsPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.DnsPrefix) {
		return nil, false
	}
	return o.DnsPrefix, true
}

// HasDnsPrefix returns a boolean if a field has been set.
func (o *ProjectHeader) HasDnsPrefix() bool {
	if o != nil && !IsNil(o.DnsPrefix) {
		return true
	}

	return false
}

// SetDnsPrefix gets a reference to the given string and assigns it to the DnsPrefix field.
func (o *ProjectHeader) SetDnsPrefix(v string) {
	o.DnsPrefix = &v
}

// GetDnsDomain returns the DnsDomain field value if set, zero value otherwise.
func (o *ProjectHeader) GetDnsDomain() string {
	if o == nil || IsNil(o.DnsDomain) {
		var ret string
		return ret
	}
	return *o.DnsDomain
}

// GetDnsDomainOk returns a tuple with the DnsDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectHeader) GetDnsDomainOk() (*string, bool) {
	if o == nil || IsNil(o.DnsDomain) {
		return nil, false
	}
	return o.DnsDomain, true
}

// HasDnsDomain returns a boolean if a field has been set.
func (o *ProjectHeader) HasDnsDomain() bool {
	if o != nil && !IsNil(o.DnsDomain) {
		return true
	}

	return false
}

// SetDnsDomain gets a reference to the given string and assigns it to the DnsDomain field.
func (o *ProjectHeader) SetDnsDomain(v string) {
	o.DnsDomain = &v
}

func (o ProjectHeader) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectHeader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DnsPrefix) {
		toSerialize["dnsPrefix"] = o.DnsPrefix
	}
	if !IsNil(o.DnsDomain) {
		toSerialize["dnsDomain"] = o.DnsDomain
	}
	return toSerialize, nil
}

type NullableProjectHeader struct {
	value *ProjectHeader
	isSet bool
}

func (v NullableProjectHeader) Get() *ProjectHeader {
	return v.value
}

func (v *NullableProjectHeader) Set(val *ProjectHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectHeader(val *ProjectHeader) *NullableProjectHeader {
	return &NullableProjectHeader{value: val, isSet: true}
}

func (v NullableProjectHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


