/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PackageDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageDescription{}

// PackageDescription struct for PackageDescription
type PackageDescription struct {
	PackageId *string `json:"packageId,omitempty"`
	ProjId *string `json:"projId,omitempty"`
	State *PackageState `json:"state,omitempty"`
	UploadTime *string `json:"uploadTime,omitempty"`
	PackageSize *string `json:"packageSize,omitempty"`
}

// NewPackageDescription instantiates a new PackageDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageDescription() *PackageDescription {
	this := PackageDescription{}
	var state PackageState = INVALID_PKG_STATE
	this.State = &state
	return &this
}

// NewPackageDescriptionWithDefaults instantiates a new PackageDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageDescriptionWithDefaults() *PackageDescription {
	this := PackageDescription{}
	var state PackageState = INVALID_PKG_STATE
	this.State = &state
	return &this
}

// GetPackageId returns the PackageId field value if set, zero value otherwise.
func (o *PackageDescription) GetPackageId() string {
	if o == nil || IsNil(o.PackageId) {
		var ret string
		return ret
	}
	return *o.PackageId
}

// GetPackageIdOk returns a tuple with the PackageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageDescription) GetPackageIdOk() (*string, bool) {
	if o == nil || IsNil(o.PackageId) {
		return nil, false
	}
	return o.PackageId, true
}

// HasPackageId returns a boolean if a field has been set.
func (o *PackageDescription) HasPackageId() bool {
	if o != nil && !IsNil(o.PackageId) {
		return true
	}

	return false
}

// SetPackageId gets a reference to the given string and assigns it to the PackageId field.
func (o *PackageDescription) SetPackageId(v string) {
	o.PackageId = &v
}

// GetProjId returns the ProjId field value if set, zero value otherwise.
func (o *PackageDescription) GetProjId() string {
	if o == nil || IsNil(o.ProjId) {
		var ret string
		return ret
	}
	return *o.ProjId
}

// GetProjIdOk returns a tuple with the ProjId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageDescription) GetProjIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjId) {
		return nil, false
	}
	return o.ProjId, true
}

// HasProjId returns a boolean if a field has been set.
func (o *PackageDescription) HasProjId() bool {
	if o != nil && !IsNil(o.ProjId) {
		return true
	}

	return false
}

// SetProjId gets a reference to the given string and assigns it to the ProjId field.
func (o *PackageDescription) SetProjId(v string) {
	o.ProjId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PackageDescription) GetState() PackageState {
	if o == nil || IsNil(o.State) {
		var ret PackageState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageDescription) GetStateOk() (*PackageState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PackageDescription) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given PackageState and assigns it to the State field.
func (o *PackageDescription) SetState(v PackageState) {
	o.State = &v
}

// GetUploadTime returns the UploadTime field value if set, zero value otherwise.
func (o *PackageDescription) GetUploadTime() string {
	if o == nil || IsNil(o.UploadTime) {
		var ret string
		return ret
	}
	return *o.UploadTime
}

// GetUploadTimeOk returns a tuple with the UploadTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageDescription) GetUploadTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UploadTime) {
		return nil, false
	}
	return o.UploadTime, true
}

// HasUploadTime returns a boolean if a field has been set.
func (o *PackageDescription) HasUploadTime() bool {
	if o != nil && !IsNil(o.UploadTime) {
		return true
	}

	return false
}

// SetUploadTime gets a reference to the given string and assigns it to the UploadTime field.
func (o *PackageDescription) SetUploadTime(v string) {
	o.UploadTime = &v
}

// GetPackageSize returns the PackageSize field value if set, zero value otherwise.
func (o *PackageDescription) GetPackageSize() string {
	if o == nil || IsNil(o.PackageSize) {
		var ret string
		return ret
	}
	return *o.PackageSize
}

// GetPackageSizeOk returns a tuple with the PackageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageDescription) GetPackageSizeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageSize) {
		return nil, false
	}
	return o.PackageSize, true
}

// HasPackageSize returns a boolean if a field has been set.
func (o *PackageDescription) HasPackageSize() bool {
	if o != nil && !IsNil(o.PackageSize) {
		return true
	}

	return false
}

// SetPackageSize gets a reference to the given string and assigns it to the PackageSize field.
func (o *PackageDescription) SetPackageSize(v string) {
	o.PackageSize = &v
}

func (o PackageDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PackageId) {
		toSerialize["packageId"] = o.PackageId
	}
	if !IsNil(o.ProjId) {
		toSerialize["projId"] = o.ProjId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.UploadTime) {
		toSerialize["uploadTime"] = o.UploadTime
	}
	if !IsNil(o.PackageSize) {
		toSerialize["packageSize"] = o.PackageSize
	}
	return toSerialize, nil
}

type NullablePackageDescription struct {
	value *PackageDescription
	isSet bool
}

func (v NullablePackageDescription) Get() *PackageDescription {
	return v.value
}

func (v *NullablePackageDescription) Set(val *PackageDescription) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageDescription) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageDescription(val *PackageDescription) *NullablePackageDescription {
	return &NullablePackageDescription{value: val, isSet: true}
}

func (v NullablePackageDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


