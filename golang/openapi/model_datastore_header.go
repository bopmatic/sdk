/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatastoreHeader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreHeader{}

// DatastoreHeader struct for DatastoreHeader
type DatastoreHeader struct {
	ProjEnvHeader *ProjEnvHeader `json:"projEnvHeader,omitempty"`
	DatastoreName *string `json:"datastoreName,omitempty"`
}

// NewDatastoreHeader instantiates a new DatastoreHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreHeader() *DatastoreHeader {
	this := DatastoreHeader{}
	return &this
}

// NewDatastoreHeaderWithDefaults instantiates a new DatastoreHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreHeaderWithDefaults() *DatastoreHeader {
	this := DatastoreHeader{}
	return &this
}

// GetProjEnvHeader returns the ProjEnvHeader field value if set, zero value otherwise.
func (o *DatastoreHeader) GetProjEnvHeader() ProjEnvHeader {
	if o == nil || IsNil(o.ProjEnvHeader) {
		var ret ProjEnvHeader
		return ret
	}
	return *o.ProjEnvHeader
}

// GetProjEnvHeaderOk returns a tuple with the ProjEnvHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreHeader) GetProjEnvHeaderOk() (*ProjEnvHeader, bool) {
	if o == nil || IsNil(o.ProjEnvHeader) {
		return nil, false
	}
	return o.ProjEnvHeader, true
}

// HasProjEnvHeader returns a boolean if a field has been set.
func (o *DatastoreHeader) HasProjEnvHeader() bool {
	if o != nil && !IsNil(o.ProjEnvHeader) {
		return true
	}

	return false
}

// SetProjEnvHeader gets a reference to the given ProjEnvHeader and assigns it to the ProjEnvHeader field.
func (o *DatastoreHeader) SetProjEnvHeader(v ProjEnvHeader) {
	o.ProjEnvHeader = &v
}

// GetDatastoreName returns the DatastoreName field value if set, zero value otherwise.
func (o *DatastoreHeader) GetDatastoreName() string {
	if o == nil || IsNil(o.DatastoreName) {
		var ret string
		return ret
	}
	return *o.DatastoreName
}

// GetDatastoreNameOk returns a tuple with the DatastoreName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreHeader) GetDatastoreNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatastoreName) {
		return nil, false
	}
	return o.DatastoreName, true
}

// HasDatastoreName returns a boolean if a field has been set.
func (o *DatastoreHeader) HasDatastoreName() bool {
	if o != nil && !IsNil(o.DatastoreName) {
		return true
	}

	return false
}

// SetDatastoreName gets a reference to the given string and assigns it to the DatastoreName field.
func (o *DatastoreHeader) SetDatastoreName(v string) {
	o.DatastoreName = &v
}

func (o DatastoreHeader) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreHeader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjEnvHeader) {
		toSerialize["projEnvHeader"] = o.ProjEnvHeader
	}
	if !IsNil(o.DatastoreName) {
		toSerialize["datastoreName"] = o.DatastoreName
	}
	return toSerialize, nil
}

type NullableDatastoreHeader struct {
	value *DatastoreHeader
	isSet bool
}

func (v NullableDatastoreHeader) Get() *DatastoreHeader {
	return v.value
}

func (v *NullableDatastoreHeader) Set(val *DatastoreHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreHeader(val *DatastoreHeader) *NullableDatastoreHeader {
	return &NullableDatastoreHeader{value: val, isSet: true}
}

func (v NullableDatastoreHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


