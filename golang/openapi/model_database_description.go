/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseDescription{}

// DatabaseDescription struct for DatabaseDescription
type DatabaseDescription struct {
	DatabaseHeader *DatabaseHeader `json:"databaseHeader,omitempty"`
	Tables []DatabaseTableDescription `json:"tables,omitempty"`
	ServiceNames []string `json:"serviceNames,omitempty"`
}

// NewDatabaseDescription instantiates a new DatabaseDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseDescription() *DatabaseDescription {
	this := DatabaseDescription{}
	return &this
}

// NewDatabaseDescriptionWithDefaults instantiates a new DatabaseDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseDescriptionWithDefaults() *DatabaseDescription {
	this := DatabaseDescription{}
	return &this
}

// GetDatabaseHeader returns the DatabaseHeader field value if set, zero value otherwise.
func (o *DatabaseDescription) GetDatabaseHeader() DatabaseHeader {
	if o == nil || IsNil(o.DatabaseHeader) {
		var ret DatabaseHeader
		return ret
	}
	return *o.DatabaseHeader
}

// GetDatabaseHeaderOk returns a tuple with the DatabaseHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseDescription) GetDatabaseHeaderOk() (*DatabaseHeader, bool) {
	if o == nil || IsNil(o.DatabaseHeader) {
		return nil, false
	}
	return o.DatabaseHeader, true
}

// HasDatabaseHeader returns a boolean if a field has been set.
func (o *DatabaseDescription) HasDatabaseHeader() bool {
	if o != nil && !IsNil(o.DatabaseHeader) {
		return true
	}

	return false
}

// SetDatabaseHeader gets a reference to the given DatabaseHeader and assigns it to the DatabaseHeader field.
func (o *DatabaseDescription) SetDatabaseHeader(v DatabaseHeader) {
	o.DatabaseHeader = &v
}

// GetTables returns the Tables field value if set, zero value otherwise.
func (o *DatabaseDescription) GetTables() []DatabaseTableDescription {
	if o == nil || IsNil(o.Tables) {
		var ret []DatabaseTableDescription
		return ret
	}
	return o.Tables
}

// GetTablesOk returns a tuple with the Tables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseDescription) GetTablesOk() ([]DatabaseTableDescription, bool) {
	if o == nil || IsNil(o.Tables) {
		return nil, false
	}
	return o.Tables, true
}

// HasTables returns a boolean if a field has been set.
func (o *DatabaseDescription) HasTables() bool {
	if o != nil && !IsNil(o.Tables) {
		return true
	}

	return false
}

// SetTables gets a reference to the given []DatabaseTableDescription and assigns it to the Tables field.
func (o *DatabaseDescription) SetTables(v []DatabaseTableDescription) {
	o.Tables = v
}

// GetServiceNames returns the ServiceNames field value if set, zero value otherwise.
func (o *DatabaseDescription) GetServiceNames() []string {
	if o == nil || IsNil(o.ServiceNames) {
		var ret []string
		return ret
	}
	return o.ServiceNames
}

// GetServiceNamesOk returns a tuple with the ServiceNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseDescription) GetServiceNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ServiceNames) {
		return nil, false
	}
	return o.ServiceNames, true
}

// HasServiceNames returns a boolean if a field has been set.
func (o *DatabaseDescription) HasServiceNames() bool {
	if o != nil && !IsNil(o.ServiceNames) {
		return true
	}

	return false
}

// SetServiceNames gets a reference to the given []string and assigns it to the ServiceNames field.
func (o *DatabaseDescription) SetServiceNames(v []string) {
	o.ServiceNames = v
}

func (o DatabaseDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatabaseHeader) {
		toSerialize["databaseHeader"] = o.DatabaseHeader
	}
	if !IsNil(o.Tables) {
		toSerialize["tables"] = o.Tables
	}
	if !IsNil(o.ServiceNames) {
		toSerialize["serviceNames"] = o.ServiceNames
	}
	return toSerialize, nil
}

type NullableDatabaseDescription struct {
	value *DatabaseDescription
	isSet bool
}

func (v NullableDatabaseDescription) Get() *DatabaseDescription {
	return v.value
}

func (v *NullableDatabaseDescription) Set(val *DatabaseDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseDescription(val *DatabaseDescription) *NullableDatabaseDescription {
	return &NullableDatabaseDescription{value: val, isSet: true}
}

func (v NullableDatabaseDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


