/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatastoreDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreDescription{}

// DatastoreDescription struct for DatastoreDescription
type DatastoreDescription struct {
	DatastoreHeader *DatastoreHeader `json:"datastoreHeader,omitempty"`
	NumObjects *string `json:"numObjects,omitempty"`
	CapacityConsumedInBytes *string `json:"capacityConsumedInBytes,omitempty"`
}

// NewDatastoreDescription instantiates a new DatastoreDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreDescription() *DatastoreDescription {
	this := DatastoreDescription{}
	return &this
}

// NewDatastoreDescriptionWithDefaults instantiates a new DatastoreDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreDescriptionWithDefaults() *DatastoreDescription {
	this := DatastoreDescription{}
	return &this
}

// GetDatastoreHeader returns the DatastoreHeader field value if set, zero value otherwise.
func (o *DatastoreDescription) GetDatastoreHeader() DatastoreHeader {
	if o == nil || IsNil(o.DatastoreHeader) {
		var ret DatastoreHeader
		return ret
	}
	return *o.DatastoreHeader
}

// GetDatastoreHeaderOk returns a tuple with the DatastoreHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreDescription) GetDatastoreHeaderOk() (*DatastoreHeader, bool) {
	if o == nil || IsNil(o.DatastoreHeader) {
		return nil, false
	}
	return o.DatastoreHeader, true
}

// HasDatastoreHeader returns a boolean if a field has been set.
func (o *DatastoreDescription) HasDatastoreHeader() bool {
	if o != nil && !IsNil(o.DatastoreHeader) {
		return true
	}

	return false
}

// SetDatastoreHeader gets a reference to the given DatastoreHeader and assigns it to the DatastoreHeader field.
func (o *DatastoreDescription) SetDatastoreHeader(v DatastoreHeader) {
	o.DatastoreHeader = &v
}

// GetNumObjects returns the NumObjects field value if set, zero value otherwise.
func (o *DatastoreDescription) GetNumObjects() string {
	if o == nil || IsNil(o.NumObjects) {
		var ret string
		return ret
	}
	return *o.NumObjects
}

// GetNumObjectsOk returns a tuple with the NumObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreDescription) GetNumObjectsOk() (*string, bool) {
	if o == nil || IsNil(o.NumObjects) {
		return nil, false
	}
	return o.NumObjects, true
}

// HasNumObjects returns a boolean if a field has been set.
func (o *DatastoreDescription) HasNumObjects() bool {
	if o != nil && !IsNil(o.NumObjects) {
		return true
	}

	return false
}

// SetNumObjects gets a reference to the given string and assigns it to the NumObjects field.
func (o *DatastoreDescription) SetNumObjects(v string) {
	o.NumObjects = &v
}

// GetCapacityConsumedInBytes returns the CapacityConsumedInBytes field value if set, zero value otherwise.
func (o *DatastoreDescription) GetCapacityConsumedInBytes() string {
	if o == nil || IsNil(o.CapacityConsumedInBytes) {
		var ret string
		return ret
	}
	return *o.CapacityConsumedInBytes
}

// GetCapacityConsumedInBytesOk returns a tuple with the CapacityConsumedInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatastoreDescription) GetCapacityConsumedInBytesOk() (*string, bool) {
	if o == nil || IsNil(o.CapacityConsumedInBytes) {
		return nil, false
	}
	return o.CapacityConsumedInBytes, true
}

// HasCapacityConsumedInBytes returns a boolean if a field has been set.
func (o *DatastoreDescription) HasCapacityConsumedInBytes() bool {
	if o != nil && !IsNil(o.CapacityConsumedInBytes) {
		return true
	}

	return false
}

// SetCapacityConsumedInBytes gets a reference to the given string and assigns it to the CapacityConsumedInBytes field.
func (o *DatastoreDescription) SetCapacityConsumedInBytes(v string) {
	o.CapacityConsumedInBytes = &v
}

func (o DatastoreDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatastoreHeader) {
		toSerialize["datastoreHeader"] = o.DatastoreHeader
	}
	if !IsNil(o.NumObjects) {
		toSerialize["numObjects"] = o.NumObjects
	}
	if !IsNil(o.CapacityConsumedInBytes) {
		toSerialize["capacityConsumedInBytes"] = o.CapacityConsumedInBytes
	}
	return toSerialize, nil
}

type NullableDatastoreDescription struct {
	value *DatastoreDescription
	isSet bool
}

func (v NullableDatastoreDescription) Get() *DatastoreDescription {
	return v.value
}

func (v *NullableDatastoreDescription) Set(val *DatastoreDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreDescription(val *DatastoreDescription) *NullableDatastoreDescription {
	return &NullableDatastoreDescription{value: val, isSet: true}
}

func (v NullableDatastoreDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


