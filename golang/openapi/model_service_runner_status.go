/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ServiceRunnerStatus the model 'ServiceRunnerStatus'
type ServiceRunnerStatus string

// List of ServiceRunnerStatus
const (
	OK ServiceRunnerStatus = "STATUS_OK"
	NOT_FOUND ServiceRunnerStatus = "STATUS_NOT_FOUND"
	DNS_CONFLICT ServiceRunnerStatus = "STATUS_DNS_CONFLICT"
	ACCT_LIMIT_REACHED ServiceRunnerStatus = "STATUS_ACCT_LIMIT_REACHED"
	EXISTS ServiceRunnerStatus = "STATUS_EXISTS"
	NOT_EXISTS ServiceRunnerStatus = "STATUS_NOT_EXISTS"
	UNKNOWN ServiceRunnerStatus = "STATUS_UNKNOWN"
)

// All allowed values of ServiceRunnerStatus enum
var AllowedServiceRunnerStatusEnumValues = []ServiceRunnerStatus{
	"STATUS_OK",
	"STATUS_NOT_FOUND",
	"STATUS_DNS_CONFLICT",
	"STATUS_ACCT_LIMIT_REACHED",
	"STATUS_EXISTS",
	"STATUS_NOT_EXISTS",
	"STATUS_UNKNOWN",
}

func (v *ServiceRunnerStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceRunnerStatus(value)
	for _, existing := range AllowedServiceRunnerStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceRunnerStatus", value)
}

// NewServiceRunnerStatusFromValue returns a pointer to a valid ServiceRunnerStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceRunnerStatusFromValue(v string) (*ServiceRunnerStatus, error) {
	ev := ServiceRunnerStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceRunnerStatus: valid values are %v", v, AllowedServiceRunnerStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceRunnerStatus) IsValid() bool {
	for _, existing := range AllowedServiceRunnerStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceRunnerStatus value
func (v ServiceRunnerStatus) Ptr() *ServiceRunnerStatus {
	return &v
}

type NullableServiceRunnerStatus struct {
	value *ServiceRunnerStatus
	isSet bool
}

func (v NullableServiceRunnerStatus) Get() *ServiceRunnerStatus {
	return v.value
}

func (v *NullableServiceRunnerStatus) Set(val *ServiceRunnerStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceRunnerStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceRunnerStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceRunnerStatus(val *ServiceRunnerStatus) *NullableServiceRunnerStatus {
	return &NullableServiceRunnerStatus{value: val, isSet: true}
}

func (v NullableServiceRunnerStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceRunnerStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

