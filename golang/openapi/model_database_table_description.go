/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseTableDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseTableDescription{}

// DatabaseTableDescription struct for DatabaseTableDescription
type DatabaseTableDescription struct {
	Name *string `json:"Name,omitempty"`
	NumRows *string `json:"NumRows,omitempty"`
	Size *string `json:"Size,omitempty"`
}

// NewDatabaseTableDescription instantiates a new DatabaseTableDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseTableDescription() *DatabaseTableDescription {
	this := DatabaseTableDescription{}
	return &this
}

// NewDatabaseTableDescriptionWithDefaults instantiates a new DatabaseTableDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseTableDescriptionWithDefaults() *DatabaseTableDescription {
	this := DatabaseTableDescription{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DatabaseTableDescription) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTableDescription) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DatabaseTableDescription) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DatabaseTableDescription) SetName(v string) {
	o.Name = &v
}

// GetNumRows returns the NumRows field value if set, zero value otherwise.
func (o *DatabaseTableDescription) GetNumRows() string {
	if o == nil || IsNil(o.NumRows) {
		var ret string
		return ret
	}
	return *o.NumRows
}

// GetNumRowsOk returns a tuple with the NumRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTableDescription) GetNumRowsOk() (*string, bool) {
	if o == nil || IsNil(o.NumRows) {
		return nil, false
	}
	return o.NumRows, true
}

// HasNumRows returns a boolean if a field has been set.
func (o *DatabaseTableDescription) HasNumRows() bool {
	if o != nil && !IsNil(o.NumRows) {
		return true
	}

	return false
}

// SetNumRows gets a reference to the given string and assigns it to the NumRows field.
func (o *DatabaseTableDescription) SetNumRows(v string) {
	o.NumRows = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DatabaseTableDescription) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTableDescription) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DatabaseTableDescription) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *DatabaseTableDescription) SetSize(v string) {
	o.Size = &v
}

func (o DatabaseTableDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseTableDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.NumRows) {
		toSerialize["NumRows"] = o.NumRows
	}
	if !IsNil(o.Size) {
		toSerialize["Size"] = o.Size
	}
	return toSerialize, nil
}

type NullableDatabaseTableDescription struct {
	value *DatabaseTableDescription
	isSet bool
}

func (v NullableDatabaseTableDescription) Get() *DatabaseTableDescription {
	return v.value
}

func (v *NullableDatabaseTableDescription) Set(val *DatabaseTableDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseTableDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseTableDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseTableDescription(val *DatabaseTableDescription) *NullableDatabaseTableDescription {
	return &NullableDatabaseTableDescription{value: val, isSet: true}
}

func (v NullableDatabaseTableDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseTableDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


