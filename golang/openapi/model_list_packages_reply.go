/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ListPackagesReply struct for ListPackagesReply
type ListPackagesReply struct {
	PackageIds []string `json:"packageIds,omitempty"`
}

// NewListPackagesReply instantiates a new ListPackagesReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListPackagesReply() *ListPackagesReply {
	this := ListPackagesReply{}
	return &this
}

// NewListPackagesReplyWithDefaults instantiates a new ListPackagesReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListPackagesReplyWithDefaults() *ListPackagesReply {
	this := ListPackagesReply{}
	return &this
}

// GetPackageIds returns the PackageIds field value if set, zero value otherwise.
func (o *ListPackagesReply) GetPackageIds() []string {
	if o == nil || o.PackageIds == nil {
		var ret []string
		return ret
	}
	return o.PackageIds
}

// GetPackageIdsOk returns a tuple with the PackageIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPackagesReply) GetPackageIdsOk() ([]string, bool) {
	if o == nil || o.PackageIds == nil {
		return nil, false
	}
	return o.PackageIds, true
}

// HasPackageIds returns a boolean if a field has been set.
func (o *ListPackagesReply) HasPackageIds() bool {
	if o != nil && o.PackageIds != nil {
		return true
	}

	return false
}

// SetPackageIds gets a reference to the given []string and assigns it to the PackageIds field.
func (o *ListPackagesReply) SetPackageIds(v []string) {
	o.PackageIds = v
}

func (o ListPackagesReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PackageIds != nil {
		toSerialize["packageIds"] = o.PackageIds
	}
	return json.Marshal(toSerialize)
}

type NullableListPackagesReply struct {
	value *ListPackagesReply
	isSet bool
}

func (v NullableListPackagesReply) Get() *ListPackagesReply {
	return v.value
}

func (v *NullableListPackagesReply) Set(val *ListPackagesReply) {
	v.value = val
	v.isSet = true
}

func (v NullableListPackagesReply) IsSet() bool {
	return v.isSet
}

func (v *NullableListPackagesReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListPackagesReply(val *ListPackagesReply) *NullableListPackagesReply {
	return &NullableListPackagesReply{value: val, isSet: true}
}

func (v NullableListPackagesReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListPackagesReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


