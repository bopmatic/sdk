/*
pb/sr.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DescribePackageReply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribePackageReply{}

// DescribePackageReply struct for DescribePackageReply
type DescribePackageReply struct {
	Desc *PackageDescription `json:"desc,omitempty"`
	PackageState *PackageState `json:"packageState,omitempty"`
	SiteEndpoint *string `json:"siteEndpoint,omitempty"`
	RpcEndpoints []string `json:"rpcEndpoints,omitempty"`
}

// NewDescribePackageReply instantiates a new DescribePackageReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribePackageReply() *DescribePackageReply {
	this := DescribePackageReply{}
	var packageState PackageState = UPLOADING
	this.PackageState = &packageState
	return &this
}

// NewDescribePackageReplyWithDefaults instantiates a new DescribePackageReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribePackageReplyWithDefaults() *DescribePackageReply {
	this := DescribePackageReply{}
	var packageState PackageState = UPLOADING
	this.PackageState = &packageState
	return &this
}

// GetDesc returns the Desc field value if set, zero value otherwise.
func (o *DescribePackageReply) GetDesc() PackageDescription {
	if o == nil || IsNil(o.Desc) {
		var ret PackageDescription
		return ret
	}
	return *o.Desc
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribePackageReply) GetDescOk() (*PackageDescription, bool) {
	if o == nil || IsNil(o.Desc) {
		return nil, false
	}
	return o.Desc, true
}

// HasDesc returns a boolean if a field has been set.
func (o *DescribePackageReply) HasDesc() bool {
	if o != nil && !IsNil(o.Desc) {
		return true
	}

	return false
}

// SetDesc gets a reference to the given PackageDescription and assigns it to the Desc field.
func (o *DescribePackageReply) SetDesc(v PackageDescription) {
	o.Desc = &v
}

// GetPackageState returns the PackageState field value if set, zero value otherwise.
func (o *DescribePackageReply) GetPackageState() PackageState {
	if o == nil || IsNil(o.PackageState) {
		var ret PackageState
		return ret
	}
	return *o.PackageState
}

// GetPackageStateOk returns a tuple with the PackageState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribePackageReply) GetPackageStateOk() (*PackageState, bool) {
	if o == nil || IsNil(o.PackageState) {
		return nil, false
	}
	return o.PackageState, true
}

// HasPackageState returns a boolean if a field has been set.
func (o *DescribePackageReply) HasPackageState() bool {
	if o != nil && !IsNil(o.PackageState) {
		return true
	}

	return false
}

// SetPackageState gets a reference to the given PackageState and assigns it to the PackageState field.
func (o *DescribePackageReply) SetPackageState(v PackageState) {
	o.PackageState = &v
}

// GetSiteEndpoint returns the SiteEndpoint field value if set, zero value otherwise.
func (o *DescribePackageReply) GetSiteEndpoint() string {
	if o == nil || IsNil(o.SiteEndpoint) {
		var ret string
		return ret
	}
	return *o.SiteEndpoint
}

// GetSiteEndpointOk returns a tuple with the SiteEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribePackageReply) GetSiteEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.SiteEndpoint) {
		return nil, false
	}
	return o.SiteEndpoint, true
}

// HasSiteEndpoint returns a boolean if a field has been set.
func (o *DescribePackageReply) HasSiteEndpoint() bool {
	if o != nil && !IsNil(o.SiteEndpoint) {
		return true
	}

	return false
}

// SetSiteEndpoint gets a reference to the given string and assigns it to the SiteEndpoint field.
func (o *DescribePackageReply) SetSiteEndpoint(v string) {
	o.SiteEndpoint = &v
}

// GetRpcEndpoints returns the RpcEndpoints field value if set, zero value otherwise.
func (o *DescribePackageReply) GetRpcEndpoints() []string {
	if o == nil || IsNil(o.RpcEndpoints) {
		var ret []string
		return ret
	}
	return o.RpcEndpoints
}

// GetRpcEndpointsOk returns a tuple with the RpcEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribePackageReply) GetRpcEndpointsOk() ([]string, bool) {
	if o == nil || IsNil(o.RpcEndpoints) {
		return nil, false
	}
	return o.RpcEndpoints, true
}

// HasRpcEndpoints returns a boolean if a field has been set.
func (o *DescribePackageReply) HasRpcEndpoints() bool {
	if o != nil && !IsNil(o.RpcEndpoints) {
		return true
	}

	return false
}

// SetRpcEndpoints gets a reference to the given []string and assigns it to the RpcEndpoints field.
func (o *DescribePackageReply) SetRpcEndpoints(v []string) {
	o.RpcEndpoints = v
}

func (o DescribePackageReply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribePackageReply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Desc) {
		toSerialize["desc"] = o.Desc
	}
	if !IsNil(o.PackageState) {
		toSerialize["packageState"] = o.PackageState
	}
	if !IsNil(o.SiteEndpoint) {
		toSerialize["siteEndpoint"] = o.SiteEndpoint
	}
	if !IsNil(o.RpcEndpoints) {
		toSerialize["rpcEndpoints"] = o.RpcEndpoints
	}
	return toSerialize, nil
}

type NullableDescribePackageReply struct {
	value *DescribePackageReply
	isSet bool
}

func (v NullableDescribePackageReply) Get() *DescribePackageReply {
	return v.value
}

func (v *NullableDescribePackageReply) Set(val *DescribePackageReply) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribePackageReply) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribePackageReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribePackageReply(val *DescribePackageReply) *NullableDescribePackageReply {
	return &NullableDescribePackageReply{value: val, isSet: true}
}

func (v NullableDescribePackageReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribePackageReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


