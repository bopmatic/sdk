syntax = "proto3";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "bopmatic.com/servicerunner/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: [
      {
        key: "BearerAuth"
        value: {
          type: TYPE_API_KEY;
          name: "Authorization"
          in: IN_HEADER;
          description: "Authorization: Bearer {token}";
        }
      },
      {
        key: "ApiKeyAuth"
        value: {
          type: TYPE_API_KEY;
          name: "Authorization"
          in: IN_HEADER;
          description: "Authorization: ApiKey {key}";
        }
      }
    ]
  }
};

service ServiceRunner {
  rpc CreateProject (CreateProjectRequest) returns (CreateProjectReply) {}
  rpc DeleteProject (DeleteProjectRequest) returns (DeleteProjectReply) {}
  rpc ListProjects (ListProjectsRequest) returns (ListProjectsReply) {}
  rpc DescribeProject (DescribeProjectRequest) returns (DescribeProjectReply) {}
  rpc DeactivateProject (DeactivateProjectRequest) returns (DeactivateProjectReply) {}

  rpc CreateEnvironment (CreateEnvironmentRequest) returns (CreateEnvironmentReply) {}
  rpc DeleteEnvironment (DeleteEnvironmentRequest) returns (DeleteEnvironmentReply) {}
  rpc ListEnvironments (ListEnvironmentsRequest) returns (ListEnvironmentsReply) {}
  rpc DescribeEnvironment (DescribeEnvironmentRequest) returns (DescribeEnvironmentReply) {}

  rpc DescribeSite (DescribeSiteRequest) returns (DescribeSiteReply) {}
  rpc ListServices (ListServicesRequest) returns (ListServicesReply) {}
  rpc DescribeService (DescribeServiceRequest) returns (DescribeServiceReply) {}
  rpc ListDatastores (ListDatastoresRequest) returns (ListDatastoresReply) {}
  rpc DescribeDatastore (DescribeDatastoreRequest) returns (DescribeDatastoreReply) {}
  rpc ListDatabases (ListDatabasesRequest) returns (ListDatabasesReply) {}
  rpc DescribeDatabase (DescribeDatabaseRequest) returns (DescribeDatabaseReply) {}

  rpc CreateDeployment (CreateDeploymentRequest) returns (CreateDeploymentReply) {}
  rpc ListDeployments (ListDeploymentsRequest) returns (ListDeploymentsReply) {}
  rpc DescribeDeployment (DescribeDeploymentRequest) returns (DescribeDeploymentReply) {}

  rpc DescribePackage (DescribePackageRequest) returns (DescribePackageReply) {}
  rpc DeletePackage (DeletePackageRequest) returns (DeletePackageReply) {}
  rpc ListPackages (ListPackagesRequest) returns (ListPackagesReply) {}
  rpc UploadPackage (UploadPackageRequest) returns (UploadPackageReply) {}

  rpc GetUploadURL (GetUploadURLRequest) returns (GetUploadURLReply) {}

  rpc GetLogs (GetLogsRequest) returns (GetLogsReply) {}
  rpc ListMetrics (ListMetricsRequest) returns (ListMetricsReply) {}
  rpc GetMetricSamples (GetMetricSamplesRequest) returns (GetMetricSamplesReply) {}

  rpc CreateApiKey (CreateApiKeyRequest) returns (CreateApiKeyReply) {}
  rpc DeleteApiKey (DeleteApiKeyRequest) returns (DeleteApiKeyReply) {}
  rpc ListApiKeys (ListApiKeysRequest) returns (ListApiKeysReply) {}
  rpc DescribeApiKey (DescribeApiKeyRequest) returns (DescribeApiKeyReply) {}
}

enum ServiceRunnerStatus {
  STATUS_INVALID = 0; // unused
  STATUS_OK = 1;
  STATUS_INTERNAL_ERR = 2;
  STATUS_DNS_CONFLICT = 3;
  STATUS_ACCT_LIMIT_REACHED = 4;
  STATUS_EXISTS = 5;
  STATUS_NOT_EXISTS = 6;
  STATUS_INVALID_REQUEST = 7;

  STATUS_UNKNOWN = 2147483647; // MAX_INT
}

message ServiceRunnerResult {
  ServiceRunnerStatus status = 1;
  string statusDetail = 2;
}

enum ProjectState {
  INVALID_PROJ_STATE = 0; // unused
  // the project has been created but no packages are presently active in any environment
  // and there are no pending deployments
  INACTIVE = 1;
  // the project has at least one package presently active in at least one environment, or
  // has at least one pending deployment
  ACTIVE = 2;
  // the project has been deleted
  PROJ_STATE_DELETED = 3;

  UNKNOWN_PROJ_STATE = 2147483647; // MAX_INT
}

message ProjectHeader {
  // the name of the project
  string name = 1;
  // the dns prefix where this project's endpoints will be surfaced; defaults to 'name'
  string dnsPrefix = 2;
  // the base domain where this project's endpoints will be surfaced; defaults to bopmatic.com
  string dnsDomain = 3;
}

message ProjectDescription {
  // a unique identifier associated with this project
  string id = 1;
  // project header
  ProjectHeader header = 2;
  // the current state of the project
  ProjectState state = 3;
  // time the project was created expressed as the number of seconds since
  // Jan 1, 1970 00:00:00 UTC
  uint64 createTime = 4;
  // a list of previously completed deployment ids which are presently active across all
  // environments the project has been deployed into
  repeated string activeDeployIds = 5;
  // a list of deployment ids which are presently running involving this project across all
  // environments
  repeated string pendingDeployIds = 6;
}

message CreateProjectRequest {
  // project header
  ProjectHeader header = 1;
}

message CreateProjectReply {
  ServiceRunnerResult result = 1;

  // a unique identifier associated with this project
  string id = 2;
}

message DeleteProjectRequest {
  // a unique identifier associated with this project
  string id = 1;
}

message DeleteProjectReply {
  ServiceRunnerResult result = 1;
}

message DeactivateProjectRequest {
  ProjEnvHeader projEnvHeader = 1; // the project & environment id to deactivate
}

message DeactivateProjectReply {
  ServiceRunnerResult result = 1;
  string deployId = 2; // the deployment id created in order to perform the deactivation
}

message ListProjectsRequest {
  reserved 1;
}

message ListProjectsReply {
  ServiceRunnerResult result = 1;

  // a list of project ids
  repeated string ids = 2;
}

message DescribeProjectRequest {
  // a unique identifier associated with this project
  string id = 1;
}

message DescribeProjectReply {
  ServiceRunnerResult result = 1;

  // project description
  ProjectDescription desc = 2;
}

message EnvironmentHeader {
  // the name of the environment
  string name = 1;
  // the dns prefix to use for endpoints in this environment (defaults to name)
  string dnsPrefix = 2;
}

message EnvironmentDescription {
  // a unique identifier associated with this environment
  string id = 1;
  // the environment header
  EnvironmentHeader header = 2;
  // time the environment was created expressed as the number of seconds since
  // Jan 1, 1970 00:00:00 UTC
  uint64 createTime = 3;
  // a list of previously completed deployment ids which are presently active in the
  // environment
  repeated string activeDeployIds = 4;
  // a list of deployment ids which are presently running in the environment
  repeated string pendingDeployIds = 5;
}

message CreateEnvironmentRequest {
  // the environment header
  EnvironmentHeader header = 1;
}

message CreateEnvironmentReply {
  ServiceRunnerResult result = 1;

  // a unique identifier associated with this environment
  string id = 2;
}

message DeleteEnvironmentRequest {
  // a unique identifier associated with this environment
  string id = 1;
}

message DeleteEnvironmentReply {
  ServiceRunnerResult result = 1;
}

message ListEnvironmentsRequest {
  reserved 1;
}

message ListEnvironmentsReply {
  ServiceRunnerResult result = 1;

  // a list of environment ids
  repeated string ids = 2;
}

message DescribeEnvironmentRequest {
  // a unique identifier associated with this environment
  string id = 1;
}

message DescribeEnvironmentReply {
  ServiceRunnerResult result = 1;

  // environment destription
  EnvironmentDescription desc = 2;
}

message ProjEnvHeader {
  // a unique identifier associated with the project to query; leave blank
  // for all
  string projId = 1;
  // a unique identifier associated with the environment to query; leave blank
  // for all
  string envId = 2;
}

message DescribeSiteRequest {
  // a project/environment tuple
  ProjEnvHeader projEnvHeader = 1;
}

message DescribeSiteReply {
  ServiceRunnerResult result = 1;

  // a project/environment tuple
  ProjEnvHeader projEnvHeader = 2;
  // site endpoint
  string siteEndpoint = 3;
}

message ListServicesRequest {
  // a project/environment tuple
  ProjEnvHeader header = 1;
}

message ListServicesReply {
  ServiceRunnerResult result = 1;

  // a project/environment tuple
  ProjEnvHeader header = 2;
  // a list of service names from the project deployed in the environment
  repeated string serviceNames = 3;
}

message ServiceHeader {
  // a project/environment tuple
  ProjEnvHeader projEnvHeader = 1;
  // a unique service name within the project
  string serviceName = 2;
}

message DescribeServiceRequest {
  // service header
  ServiceHeader svcHeader = 1;
}

message ServiceDescription {
  // service header
  ServiceHeader svcHeader = 1;
  // endpoints for each RPC within the service
  repeated string rpcEndpoints = 2;
  // set of databases this service is configured to access
  repeated string databaseNames = 3;
  // set of datastores this service is configured to access
  repeated string datastoreNames = 4;
  // file within your project defining its APIs
  string apiDef = 5;
  // TCP port your service is configured to listen on
  uint64 port = 6;
}

message DescribeServiceReply {
  ServiceRunnerResult result = 1;

  // service description
  ServiceDescription desc = 2;
}

message ListDatastoresRequest {
  // a project/environment tuple
  ProjEnvHeader header = 1;
}

message ListDatastoresReply {
  ServiceRunnerResult result = 1;

  // a project/environment tuple
  ProjEnvHeader header = 2;
  // a list of service names from the project deployed in the environment
  repeated string datastoreNames = 3;
}

message DatastoreHeader {
  // a project/environment tuple
  ProjEnvHeader projEnvHeader = 1;
  // a unique service name within the project
  string datastoreName = 2;
}

message DescribeDatastoreRequest {
  // datastore header
  DatastoreHeader datastoreHeader = 1;
}

message DatastoreDescription {
  // datastore header
  DatastoreHeader datastoreHeader = 1;
  // number of store objects
  uint64 numObjects = 2;
  // amount of utilized capacity
  uint64 capacityConsumedInBytes = 3;
  // list of services within the project which can access this database
  repeated string serviceNames = 4;
}

message DescribeDatastoreReply {
  ServiceRunnerResult result = 1;

  // datastore description
  DatastoreDescription desc = 2;
}

message ListDatabasesRequest {
  // a project/environment tuple
  ProjEnvHeader header = 1;
}

message ListDatabasesReply {
  ServiceRunnerResult result = 1;

  // a project/environment tuple
  ProjEnvHeader header = 2;
  // a list of service names from the project deployed in the environment
  repeated string databaseNames = 3;
}

message DatabaseHeader {
  // a project/environment tuple
  ProjEnvHeader projEnvHeader = 1;
  // a unique service name within the project
  string databaseName = 2;
}

message DescribeDatabaseRequest {
  // database header
  DatabaseHeader databaseHeader = 1;
}

message DatabaseTableDescription {
  // name of the database table
  string Name = 1;
  // number of rows in the table
  uint64 NumRows = 2;
  // table size in bytes
  uint64 Size = 3;
  // list of services within the project which can access this database
  repeated string serviceNames = 4;
}

message DatabaseDescription {
  // database header
  DatabaseHeader databaseHeader = 1;
  // a list of table names from the project deployed in the environment
  reserved 2; // Deprecated tableNames
  repeated DatabaseTableDescription tables = 3;
  // a list of services allowed to access this database
  repeated string serviceNames = 4;
}

message DescribeDatabaseReply {
  ServiceRunnerResult result = 1;

  // database description
  DatabaseDescription desc = 2;
}

enum DeploymentType {
  INVALID_DEPLOY_TYPE = 0; // unused
  NEW_PACKAGE = 1;   // the deployment was created in order to deploy a new package to
                     // the environment (customer initiated)
  ENV_TEARDOWN = 2;  // the deployment was created in order to remove the project from
                     // the environment (customer initiated)
  SECURITY_UPDATE = 3;// the deployment was created in order to perform a security update
                     // on the backend infrastructure (service initiated)
  INF_UPDATE = 4;    // the deployment was created in order to perform a non-security related
                     // update on the backend infrastructure (service initiated)

  UNKNOWN_DEPLOY_TYPE = 2147483647; // MAX_INT
}

enum DeploymentInitiator {
  INVALID_DEPLOY_INIT = 0; // unused
  CUSTOMER = 1; // the customer initiated the deployment
  SERVICE = 2;  // Bopmatic initiated the deployment

  UNKNOWN_DEPLOY_INIT = 2147483647; // MAX_INT
}

enum DeploymentState {
  INVALID_DEPLOY_STATE = 0; // unused
  CREATED = 1;    // the deployment has been created, but no action has yet been taken
  DPLY_VALIDATING = 2; // the package associated with the deployment is in the process of being
                  // validated
  DPLY_BUILDING = 3;   // the package associated with the deployment passed validation and is in
                  // the process of being compiled
  DEPLOYING = 4;  // the package associated with the deployment compiled successfully and is
                  // in the process of being deployed to the environment specified
  SUCCESS = 5;    // the deployment was successful and the package associated with the
                  // deployment is now active in the environment specified
  FAILED = 6;     // the deployment failed; see DeploymentDescription.stateDetail for further
                  // information

  UNKNOWN_DEPLOY_STATE = 2147483647; // MAX_INT
}

enum DeploymentStateDetail {
  INVALID_DEPLOY_STATE_DET = 0;
  NONE = 1;
  PKG_INVALID = 2;// the package associated with the deployment failed validation checks and
                  // cannot be deployed
  BLD_INVALID = 3;// the package associated with the deployment failed to compile
  DPLY_SUPPORT_NEEDED = 4;// the deployment failed for an unknown reason; Bopmatic support
                     // is investigating the problem

  UNKNOWN_DEPLOY_STATE_DET = 2147483647; // MAX_INT
}

message DeploymentHeader {
  // the package id associated with this deployment
  string pkgId = 1;
  // the project id associated with this deployment
  string projId = 2;
  // the environment id associated with this deployment
  string envId = 3;
  // the type of the deployment
  DeploymentType type = 5;
  // the initiator of the deployment
  DeploymentInitiator initiator = 6;
}

message DeploymentDescription {
  // a unique identifier associated with this deployment
  string id = 1;
  // deployment header
  DeploymentHeader header = 2;
  // the deployment's state
  DeploymentState state = 3;
  // additional detail regarding the deployment's state
  DeploymentStateDetail stateDetail = 4;
  // time the deployment was created expressed as the number of seconds since
  // Jan 1, 1970 00:00:00 UTC
  uint64 createTime = 5;
  // time the package validation began expressed as the number of seconds since
  // Jan 1, 1970 00:00:00 UTC
  uint64 validationStartTime = 6;
  // time the package build began expressed as the number of seconds since
  // Jan 1, 1970 00:00:00 UTC
  uint64 buildStartTime = 7;
  // time the environment deployment began expressed as the number of seconds since
  // Jan 1, 1970 00:00:00 UTC
  uint64 deployStartTime = 8;
  // time the deployment completed
  uint64 endTime = 9;
}

message CreateDeploymentRequest {
  // deployment header
  DeploymentHeader header = 1;
}

message CreateDeploymentReply {
  ServiceRunnerResult result = 1;

  // a unique identifier associated with this deployment
  string id = 2;
}

message ListDeploymentsRequest {
  // a project/environment tuple
  ProjEnvHeader projEnvHeader = 1;
}

message ListDeploymentsReply {
  ServiceRunnerResult result = 1;

  // list of unique identifiers associated with each deployment
  repeated string ids = 2;
}

message DescribeDeploymentRequest {
  // a unique identifier associated with this deployment
  string id = 1;
}

message DescribeDeploymentReply {
  ServiceRunnerResult result = 1;

  // deployment description
  DeploymentDescription desc = 2;
}

enum PackageState {
  INVALID_PKG_STATE = 0; // unused
  UPLOADING = 1;        // package is currently in the process of being uploaded
  UPLOADED = 2;         // upload has completed; the package has not yet started validataion
  PKG_VALIDATING = 3;   // the package is in the process of being validated
  INVALID = 4;          // the package failed validation checks or builds and cannot be
                        // deployed
  PKG_BUILDING = 5;     // the package passed validation and is in the process of being built
  PKG_SUPPORT_NEEDED = 6;   // something went wrong and Bopmatic support is investigating
  PKG_DELETED = 7;         // the package has been deleted
  BUILT = 8;           // the package was successfully built and is eligible to be deployed

  UNKNOWN_PKG_STATE = 2147483647; // MAX_INT
}

message PackageDescription {
  reserved 1;              // Deprecated name; use projId instead
  string packageId = 2;    // pkg-<hex string of first 4 bytes of packageXsum>
  string projId = 7;       // project id associated with this package
  reserved 3;              // Deprecated packageXum; see UploadPackageRequest instead
  reserved 4;              // Deprecated packageTarballData; see UploadPackageRequest instead
  reserved 5;              // Deprecated packageName
  reserved 6;              // Deprectaed packageTarballURL; see UploadPackageRequest instead
  // package state
  PackageState state = 8;
  // time the package was first uploaded expressed as the number of seconds since
  // Jan 1, 1970 00:00:00 UTC
  uint64 uploadTime = 9;
  uint64 packageSize = 10; // size of the compressed package in bytes
}

message UploadPackageRequest {
  string projId = 1;             // project id associated with this package
  bytes packageXsum = 2;         // sha256 checksum of packageTarballData
  // packageTarballData and packageTarballURL are mutually exclusive
  bytes packageTarballData = 3;  // package tarball content in .tar.xz format (limited to 6MiB);
  string packageTarballURL = 4;  // URL to package tarball (when larger than 6MiB)
}

message UploadPackageReply {
  ServiceRunnerResult result = 1;
  string pkgId = 2;             // package id associated with this package
}

message DescribePackageRequest {
  string packageId = 1;
}

message DescribePackageReply {
  ServiceRunnerResult result = 5;
  PackageDescription desc = 1;
  reserved 2; // Deprecated state; See PackageDescription.state instead
  reserved 3; // Deprecated siteEndpoint; see DescribeSite instead
  reserved 4; // Deprecated rpcEndpoints = 4; see DescribeService instead
}

message ListPackagesRequest {
  reserved 1; // Deprecated projectName; use projId instead
  string projId = 2; // leave empty for all projects
}

message ListPackagesReply {
  message ListPackagesItem {
    reserved 1; // Deprecated projectName; use projId instead
    string projId = 3;
    string packageId = 2;
  }

  ServiceRunnerResult result = 2;
  repeated ListPackagesItem items = 1;
}

message DeletePackageRequest {
  string packageId = 1;
}

message DeletePackageReply {
  ServiceRunnerResult result = 2;
  PackageState state = 1;
}

message GetUploadURLRequest {
  string key = 1;
}

message GetUploadURLReply {
  ServiceRunnerResult result = 2;
  string URL = 1;
}

message GetLogsRequest {
  reserved 1; // Deprecated projectName; use projId instead
  string projId = 6;             // project id
  string envId = 7;              // environment id
  // optional; can leave empty for all services otherwise name of a service defined within the Bopmatic project
  string serviceName = 2;
  reserved 3;                    // Deprecated rpcName
  uint64 startTime = 4;          // earliest log message to retrieve expressed as the number
                                 // of seconds since Jan 1, 1970 00:00:00 UTC
  uint64 endTime = 5;            // latest log message to retrieve expressed as the number of
                                 // seconds since Jan 1, 1970 00:00:00 UTC
}

message GetLogsEntry {
  uint64 timestamp = 1;          // timestamp of the log message expressed as the number of
                                 // seconds since Jan 1, 1970 00:00:00 UTC
  string message = 2;            // log message
}

message GetLogsReply {
  ServiceRunnerResult result = 2;
  repeated GetLogsEntry entries = 1;
}

enum MetricsScope {
  INVALID_METRIC_SCOPE = 0;
  METRIC_SCOPE_ALL = 1;
  METRIC_SCOPE_SERVICE = 2;
  METRIC_SCOPE_DATASTORE = 3;
  METRIC_SCOPE_DATABASE = 4;

  UNKNOWN_METRIC_SCOPE = 2147483647; // MAX_INT
}

message ListMetricsRequest {
  MetricsScope scope = 1;        // the scope of the returned metrics names; e.g. all or limited to 1 entity class
}

message ListMetricsEntry {
  string name = 1;               // the name of the metric
  string description = 2;        // a description of the metric
  uint64 samplePeriod = 3;       // the duration of each period the metric is sampled in seconds
  MetricsScope scope = 4;        // which scope the metric belongs to
}

message ListMetricsReply {
  ServiceRunnerResult result = 1;
  repeated ListMetricsEntry entries = 2;
}

enum MetricsFormat {
  INVALID_METRIC_FORMAT = 0;
  METRIC_FORMAT_OPENMETRICS = 1;

  UNKNOWN_METRIC_FORMAT = 2147483647; // MAX_INT
}

message GetMetricSamplesRequest {
  string projId = 1;             // project id
  string envId = 2;              // environment id
  MetricsScope scope = 3;        // the scope of the metrics query; e.g. all or limited to 1 entity class
  // optional; can leave empty for all entities in a given scope class or set to a specific entity to retrieve metrics from only that entity. for example, to retrieve only the metrics
  // related to a database named 'foo', set scope=METRIC_SCOPE_DATABASE and
  // scopeQualifier='foo'
  string scopeQualifier = 4;
  // optional; list of metric names to retrieve; can leave empty for all
  repeated string metricNames = 5;
  uint64 startTime = 6;          // earliest metric to retrieve expressed as the number
                                 // of seconds since Jan 1, 1970 00:00:00 UTC
  uint64 endTime = 7;            // latest metric to retrieve expressed as the number of
                                 // seconds since Jan 1, 1970 00:00:00 UTC
  MetricsFormat format = 8;      // desired output format of the retrieved metrics
  uint64 samplePeriod = 9;       // desired metric sample period in seconds; default is 300s
}

message GetMetricSamplesReply {
  ServiceRunnerResult result = 1;
  string metricBuf = 2; // the requested metrics in the specified output format
}

message CreateApiKeyRequest {
  // the name of the API key
  string name = 1;
  // a description of the API key
  string description = 2;
  // time the key should expire expressed as the number of seconds since
  // Jan 1, 1970 00:00:00 UTC. A value of 0 indicates the key should never expire.
  uint64 expireTime = 3;
}

message CreateApiKeyReply {
  ServiceRunnerResult result = 1;
  string keyId = 2; // the id of the created key
  bytes keyData = 3; // the content of the created key to be saved locally
}

message DeleteApiKeyRequest {
  // the id of the api key to delete
  string keyId = 1;
}

message DeleteApiKeyReply {
  ServiceRunnerResult result = 1;
}

message ListApiKeysRequest {
  reserved 1;
}

message ListApiKeysReply {
  ServiceRunnerResult result = 1;
  repeated string keyIds = 2;
}

message DescribeApiKeyRequest {
  // the id of the API key to describe
  string keyId = 1;
}

message ApiKeyDescription {
  // the id of the API key
  string keyId = 1;
  // the name of the API key
  string name = 2;
  // a description of the API key
  string description = 3;
  // time the key was created expressed as the number of seconds since
  // Jan 1, 1970 00:00:00 UTC.
  uint64 createTime = 4;
  // time the key should expire expressed as the number of seconds since
  // Jan 1, 1970 00:00:00 UTC. A value of 0 indicates the key should never expire.
  uint64 expireTime = 5;
  // time the key was last uzed expressed as the number of seconds since
  // Jan 1, 1970 00:00:00 UTC. A value of 0 indicates the key was never used.
  uint64 lastUsed = 6;
}

message DescribeApiKeyReply {
  ServiceRunnerResult result = 1;
  // api key description
  ApiKeyDescription desc = 2;
}
