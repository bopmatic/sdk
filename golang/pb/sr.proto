syntax = "proto3";
option go_package = "bopmatic.com/servicerunner/pb";

service ServiceRunner {
  rpc DescribePackage (DescribePackageRequest) returns (DescribePackageReply) {}
  rpc DeletePackage (DeletePackageRequest) returns (DeletePackageReply) {}
  rpc ListPackages (ListPackagesRequest) returns (ListPackagesReply) {}
  rpc DeployPackage (DeployPackageRequest) returns (DeployPackageReply) {}
  rpc GetUploadURL (GetUploadURLRequest) returns (GetUploadURLReply) {}
  rpc GetLogs (GetLogsRequest) returns (GetLogsReply) {}
}

enum PackageState {
  UPLOADING = 0;        // package is currently in the process of being uploaded
  UPLOADED = 1;         // upload has completed; the package has not yet started validataion
  VALIDATING = 2;       // the package is in the process of being validated
  INVALID = 3;          // the package failed validation checks and cannot be deployed
  BUILDING = 4;         // the package passed validation and is in the process of being built
  DEPLOYING = 5;        // the package is built and in the process of being deployed to production
  PRODUCTION = 6;       // the package is active in production
  DEACTIVATING = 7;     // the package is in the process of being deactivated from production
  DELETING = 8;         // the package is in the process of being deleted
  SUPPORT_NEEDED = 9;   // something went wrong and Bopmatic support needs to investigate
  DELETED = 10;         // the package has been deleted

  UNKNOWN_PKG_STATE = 2147483647; // MAX_INT
}

message PackageDescription {
  string projectName = 1;        // name of the Bopmatic project; must be unique
  string packageId = 2;          // hex string of first 4 bytes of packageXsum
  bytes packageXsum = 3;         // sha256 checksum of packageTarballData
  bytes packageTarballData = 4;  // package tarball content in .tar.xz format (limited to 6MiB);
  reserved 5;                    // Deprecated packageName
  string packageTarballURL = 6;  // URL to package tarball (when larger than 6MiB)
  // packageTarballData and packageTarballURL are mutually exclusive
}

message DeployPackageRequest {
  PackageDescription desc = 1;
}

message DeployPackageReply {
  PackageState state = 1;
}

message DescribePackageRequest {
  string packageId = 1;
}

message DescribePackageReply {
  PackageDescription desc = 1;
  PackageState packageState = 2;
  // the following fields are only valid when packageState==PRODUCTION
  string siteEndpoint = 3;
  repeated string rpcEndpoints = 4;
}

message ListPackagesRequest {
  string projectName = 1;  // leave empty for all projects
}

message ListPackagesReply {
  message ListPackagesItem {
    string projectName = 1;
    string packageId = 2;
  }
  repeated ListPackagesItem items = 1;
}

message DeletePackageRequest {
  string packageId = 1;
}

message DeletePackageReply {
  PackageState state = 1;
}

message GetUploadURLRequest {
  string key = 1;
}

message GetUploadURLReply {
  string URL = 1;
}

message GetLogsRequest {
  string projectName = 1;        // name of the Bopmatic project
  string serviceName = 2;        // name of a service defined within the Bopmatic project
  string rpcName = 3;            // name of an RPC defined within the service
  uint64 startTime = 4;          // earliest log message to retrieve expressed as the number
                                 // of seconds since Jan 1, 1970 00:00:00 UTC
  uint64 endTime = 5;            // latest log message to retrieve expressed as the number of
                                 // seconds since Jan 1, 1970 00:00:00 UTC
}

message GetLogsEntry {
  uint64 timestamp = 1;          // timestamp of the log message expressed as the number of
                                 // seconds since Jan 1, 1970 00:00:00 UTC
  string message = 2;            // log message
}

message GetLogsReply {
  repeated GetLogsEntry entries = 1;
}
